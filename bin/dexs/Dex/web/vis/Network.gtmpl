<!doctype html>
<html>
<head>
  <title>dex.js : Network</title>

<style type="text/css">
html,body,#ChartArea{
  height : 100%;
  min-height : 100%;
  width : 100%;
  min-width : 100%;
}
</style>

<style>
<%
  println new File("javascript/vis/latest/vis.min.css").text
%>
</style>
<script>
<%
  println new File("javascript/vis/latest/vis.js").text
%>
</script>

<script type="text/javascript">

// Load dex data.  
<%
  println dexData.toCsvString();
%>

  var nodes = null;
  var edges = null;
  var network = null;

  var nodeMap = {};
  var linkMap = {};
    
  var colors = ['#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00'];
    
  var id = 1;

  var weightIndex = csv.header.indexOf("WEIGHT");

  // Create node map.    
  csv.header.map ( function(h, ci) {
    if (!h.startsWith("WEIGHT"))
    {
      csv.data.map ( function(row) {
        if (!nodeMap[h + ":" + row[ci]])
        {
          nodeMap[h + ":" + row[ci]] = {
            'id' : id,
            'label' : row[ci],
            'linksIn'  : 0,
            'linksOut' : 0,
            'weight'   : (weightIndex >= 0) ? row[weightIndex] : 1,
            'color' : colors[ci%colors.length],
            'group' : ci
          };
          id++;
        }
        else
        {
          nodeMap[h + ":" + row[ci]]['weight'] +=
            (weightIndex >= 0) ? row[weightIndex] : 1;
        }
      });
    }
  });

  // Count links from C1 -> C2 -> ... -> Cx
  for (var ci=1; ci<csv.header.length; ci++)
  {
    if (!csv.header[ci].startsWith("WEIGHT"))
    {
      for (var ri=0; ri<csv.data.length; ri++)
      {
        var src  = csv.header[ci-1] + ":" + csv.data[ri][ci-1];
        var dest = csv.header[ci] + ":" + csv.data[ri][ci];
        var linkKey = src + "->" + dest;
        nodeMap[src]['linksOut']++;
        nodeMap[dest]['linksIn']++;
        
        linkWeight = (weightIndex >= 0) ? csv.data[ri][weightIndex] : 1;
          
        if (!linkMap[linkKey])
        {
          linkMap[linkKey] = {
            'from' : nodeMap[src].id,
            'to'   : nodeMap[dest].id,
            'linkCount' : 1,
            'weight' : linkWeight,
            'label' : nodeMap[src].label + "->" + nodeMap[dest].label +
              ": 1 link, weight = " + linkWeight
          };
        }
        else
        {
          linkMap[linkKey]['linkCount']++;
          linkMap[linkKey]['linkWeight'] += linkWeight;
          linkMap[linkKey]['label'] =
            nodeMap[src].label + "->" + nodeMap[dest].label +
            ": " + linkMap[linkKey]['linkCount'] + " links, weight = " +
            linkMap[linkKey]['weight'];
        }
      }
    }
  }

  nodes = [];
  edges = [];

  // Populate nodes
  for (var key in nodeMap) {
    var node = nodeMap[key];
    nodes.push({
      'id'    : node.id,
      'value' : node.weight,
      'label' : node.label,
      'color' : node.color,
      'group' : node.group
    });
  }
      
  // Populate edges
  for (var key in linkMap) {
    var edge = linkMap[key];
    edges.push({
      'from'  : edge.from,
      'to'    : edge.to,
      'value' : edge.weight,
      'title' : edge.label,
      'font'  : {'align': 'middle'} });
  }

  function draw() {
    
    // Instantiate our network object.
    var container = document.getElementById('network');
    var width = window.innerWidth;
    var height = window.innerHeight;
      
    container.setAttribute("style","width:" + width + "px");
    container.setAttribute("style","height:" + height + "px");
      
    var data = {
      nodes: nodes,
      edges: edges
    };
      
    var options = {
      nodes: {
        shape: 'dot',
        scaling:{
          label: {
            min:8,
            max:64
          }
        },
        'font' : {
          'color' : '#C04D3B'
        }
      },
      'edges' : {
        //'arrows' : 'from',
        'shadow': true
      },
      'physics' : {
        'solver' : 'forceAtlas2Based',
        //'solver' : 'hierarchicalRepulsion',
        //'solver' : 'repulsion',
        //'solver' : 'barnesHut',
        'forceAtlas2Based' : {
          'gravitationalConstant' : -50,
          'springConstant' : .08,
          'centralGravity' : .02,
          'damping' : .1,
          'avoidOverlap' : .0,
          'springLength' : 100
        },
        maxVelocity: 50,
        minVelocity: 0.2,
        stabilization: {
          enabled: true,
          iterations: 200,
          updateInterval: 100,
          onlyDynamicEdges: false,
          fit: true
        },
      },
    };
    network = new vis.Network(container, data, options);
  }
  </script>

</head>
<body onload="draw()">
<div id="network"></div>
</body>
</html>
