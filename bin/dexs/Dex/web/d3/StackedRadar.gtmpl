<!DOCTYPE html>
<% import com.dexvis.util.DexUtil %>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <title>Stacked Radar Chart</title>

<style>
<%
  println new File("javascript/jquery-ui/latest/jquery-ui.min.css").text
  println new File("javascript/jquery-ui/latest/jquery-ui.theme.min.css").text
%>
</style>

<script>
<%
  println new File("javascript/jquery/latest/jquery.min.js").text
  println new File("javascript/jquery-ui/latest/jquery-ui.min.js").text
  println new File("javascript/underscore/latest/underscore-min.js").text
  println new File("javascript/dexjs/latest/dex.min.js").text
%>
</script>

<style type="text/css">

.axis line {
  stroke: #000;
}

.axis path {
  fill: none;
  stroke: #000;
}

.axis + .axis g text {
  display: none;
}
</style>

</head>
<body>
<div id="chartTitle" class="ui-widget-content">
  <h1 id="titletext">Stacked Radar Chart</h1>
</div>

<div id="chart"></div>

<script type="text/javascript">
<%
   def numericColumns = dexData?.getNumericColumns()
   def data = dexData?.getData()
   def header = dexData?.getHeader()

   def sdata = dexData?.select(numericColumns)
   def sheaders = sdata?.getHeader()
   def lines = []
   
   sdata.getData().sort() { a, b -> (a[0] as Double) <=> (b[0] as Double)}.eachWithIndex
   {
     row, ri ->
     row.eachWithIndex
     {
       col, ci ->
       if (ci > 0)
       {
         lines << "{ \"time\": \"${row[0]}\", \"key\": \"${sheaders[ci]}\", \"value\": \"$col\" }"
       }
     }
   }
   println "var jsonData = [" + lines.join(",\n") + "];"
%>

readJson = function(text, callback)
{
  callback(text ? JSON.parse(text) : null);
}

var width = 800,
    height = 800,
    outerRadius = height / 2 - 10;
    innerRadius = 120,
    fontSize = 12;
var numAxis = 10;
var precision = 1;
var opacity      = 100;
var strokeWidth  = 1;
var offset = "zero";
var colorScheme = "1";

function draw()
{
  d3.select("#chart").html("");
  drawStackedRadar(width, height, innerRadius, outerRadius, fontSize, numAxis, precision, opacity, strokeWidth, offset, colorScheme);
}

function drawStackedRadar(width, height, innerRadius, outerRadius, fontSize, numAxis, precision, opacity, strokeWidth, offset, colorScheme)
{
  //var formatDate = d3.time.format("%a"),
  //    formatDay = function(d) { return formatDate(new Date(2007, 0, d)); };

//  var angle = d3.time.scale()
//    .range([0, 2 * Math.PI]);

  var angle = d3.scale.linear()
    .range([0, 2 * Math.PI]);

  var radius = d3.scale.linear()
    .range([innerRadius, outerRadius]);

  var z = d3.scale.category20();

  var stack = d3.layout.stack()
    .offset(offset)
    .values(function(d) { return d.values; })
    .x(function(d) { return d.time; })
    .y(function(d) { return d.value; });

  var nest = d3.nest()
    .key(function(d) { return d.key; });

  var line = d3.svg.line.radial()
    .interpolate("cardinal-closed")
    .angle(function(d) { return angle(d.time); })
    .radius(function(d) { return radius(d.y0 + d.y); });

  var area = d3.svg.area.radial()
    .interpolate("cardinal-closed")
    .angle(function(d) { return angle(d.time); })
    .innerRadius(function(d) { return radius(d.y0); })
    .outerRadius(function(d) { return radius(d.y0 + d.y); });

  var svg = d3.select("#chart").append("svg")
    .attr("width", width)
    .attr("height", height)
    .append("g")
    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

  readJson(JSON.stringify(jsonData), function(data) {
    data.forEach(function(d) {
      d.time = +d.time;
      d.value = +d.value;
  });

  var layers = stack(nest.entries(data));

  // Extend the domain slightly to match the range of [0, 2PI].
  //angle.domain([0, d3.max(data, function(d) { return d.time + 1; })]);
  angle.domain([d3.min(data, function(d) { return d.time; }),
                d3.max(data, function(d) { return d.time; })]);

  radius.domain([0, d3.max(data, function(d) { return d.y0 + d.y; })]);

  var fill = getFill(colorScheme, 256);

  svg.selectAll(".layer")
      .data(layers)
    .enter().append("path")
      .attr("class", "layer")
      .attr("d", function(d) { return area(d.values); })
      .attr("opacity", opacity / 100.0)
      .style("fill", function(d, i) { return fill(i); });

  svg.selectAll(".axis")
      //.data(d3.range(angle.domain()[1]))
      .data(d3.range(angle.domain()[0], angle.domain()[1], (angle.domain()[1] - angle.domain()[0])/numAxis))
    .enter().append("g")
      .attr("class", "axis")
      .attr("transform", function(d) { return "rotate(" + angle(d) * 180 / Math.PI + ")"; })
      .attr("stroke-width", strokeWidth)
    .call(d3.svg.axis()
      .scale(radius.copy().range([-innerRadius, -outerRadius]))
      .orient("left"))
    .append("text")
      .attr("y", -innerRadius + 6)
      .attr("dy", ".71em")
      .attr("text-anchor", "middle")
      .attr("font-size", fontSize)
      .text(function(d) { return d.toFixed(precision); });
});
}

draw();

<%
println """
  \$(function() {
		 \$( "#height-slider" ).slider(
		 {
	     min: 100,
		   max: 2000,
		   value: height,
		   slide : function(event, ui)
		   {
		     height = ui.value;
		     draw();
	       \$("#height").val(\$("#height-slider").slider("value"));
		   }
		});
		\$("#height").val(\$("#height-slider").slider("value"));
	});

	\$(function() {
	  \$( "#width-slider" ).slider(
		{
	    min: 100,
		  max: 2000,
		  value: width,
		  slide : function(event, ui)
		  {
		    width = ui.value;
		    draw();
	      \$("#width").val(\$("#width-slider").slider("value"));
		  }
		});
		\$("#width").val(\$("#width-slider").slider("value"));
	});

	\$(function() {
	  \$( "#innerradius-slider" ).slider(
		{
	    min: 1,
		  max: 1000,
		  value: innerRadius,
		  slide : function(event, ui)
		  {
		    innerRadius = ui.value;
		    draw();
	      \$("#innerradius").val(\$("#innerradius-slider").slider("value"));
		  }
		});
		\$("#innerradius").val(\$("#innerradius-slider").slider("value"));
	});

	\$(function() {
		\$( "#outerradius-slider" ).slider(
		{
	    min: 1,
		  max: 1000,
		  value: outerRadius,
		  slide : function(event, ui)
		  {
		    outerRadius = ui.value;
		    draw();
	      \$("#outerradius").val(\$("#outerradius-slider").slider("value"));
		  }
		});
		\$("#outerradius").val(\$("#outerradius-slider").slider("value"));
	});

	\$(function() {
		\$( "#numaxis-slider" ).slider(
		{
	      min: 1,
		  max: 30,
		  value: numAxis,
		  slide : function(event, ui)
		  {
		    numAxis = ui.value;
		    draw();
	        \$("#numaxis").val(\$("#numaxis-slider").slider("value"));
		  }
		});
		\$("#numaxis").val(\$("#numaxis-slider").slider("value"));
	});

	\$(function() {
		\$( "#precision-slider" ).slider(
		{
	      min: 0,
		  max: 5,
		  value: precision,
		  slide : function(event, ui)
		  {
		    precision = ui.value;
		    draw();
	        \$("#precision").val(\$("#precision-slider").slider("value"));
		  }
		});
		\$("#precision").val(\$("#precision-slider").slider("value"));
	});

	\$(function() {
		\$( "#opacity-slider" ).slider(
		{
	      min: 1,
		  max: 100,
		  value: opacity,
		  slide : function(event, ui)
		  {
		    opacity = ui.value;
		    draw();
	        \$("#opacity").val(\$("#opacity-slider").slider("value"));
		  }
		});
		\$("#opacity").val(\$("#opacity-slider").slider("value"));
	});

	\$(function() {
		\$( "#strokewidth-slider" ).slider(
		{
	      min: 1,
		  max: 20,
		  value: strokeWidth,
		  slide : function(event, ui)
		  {
		    strokeWidth = ui.value;
		    draw();
	        \$("#strokewidth").val(\$("#strokewidth-slider").slider("value"));
		  }
		});
		\$("#strokewidth").val(\$("#strokewidth-slider").slider("value"));
	});

	\$(function() {
		\$( "#fontsize-slider" ).slider(
		{
	      min: 1,
		  max: 48,
		  value: fontSize,
		  slide : function(event, ui)
		  {
		    fontSize = ui.value;
		    draw();
	        \$("#fontsize").val(\$("#fontsize-slider").slider("value"));
		  }
		});
		\$("#fontsize").val(\$("#fontsize-slider").slider("value"));
	});

    \$(function() {
    	\$( "#chartTitle" ).draggable();
        \$( "#chartConfig" ).draggable();
        \$( "#chart" ).draggable();
    });

  \$(function()
  {
    \$("#colorschemeSelection").change(function ()
    {
      colorScheme = this.value;
      draw();
      d3.select("#colorScheme").attr("value", colorScheme);
    });
  });

\$(function()
{
  \$("#offsetSelection").change(function ()
  {
    offset = this.value;
    draw();
    d3.select("#offset").attr("value", offset);
  });
});

function titleChange(newTitle)
{
  d3.select("title").text(newTitle);
  d3.select("#titletext").text(newTitle);
}

"""
%>
</script>
    
<div id="chartConfig" class="demo">
    <h1>Configuration</h1>
	<div>
		<label for="height">Height:</label>
		<input type="text" id="height" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="height-slider"/>
	</div>
	<div>
		<label for="width">Width:</label>
		<input type="text" id="width" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="width-slider"/>
	</div>
	<div>
		<label for="innerradius">Inner Radius:</label>
		<input type="text" id="innerradius" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="innerradius-slider"/>
	</div>
	<div>
		<label for="outerradius">Outer Radius:</label>
		<input type="text" id="outerradius" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="outerradius-slider"/>
	</div>
	<div>
		<label for="numaxis">Number of Axis:</label>
		<input type="text" id="numaxis" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="numaxis-slider"/>
	</div>
	<div>
		<label for="precision">Precision:</label>
		<input type="text" id="precision" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="precision-slider"/>
	</div>
		<div>
		<label for="opacity">Opacity:</label>
		<input type="text" id="opacity" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="opacity-slider"/>
	</div>
	<div>
		<label for="strokewidth">Stroke Width:</label>
		<input type="text" id="strokewidth" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="strokewidth-slider"/>
	</div>
	<div>
		<label for="fontsize">Font Size:</label>
		<input type="text" id="fontsize" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="fontsize-slider"/>
	</div>
  <div>
    <label for="offset"
     title="<b>Offset:</b><br><br>This will specify stack offset algorithm.<br><br><table><tr><td>Silhouette</td><td>Center the stream.</td></tr><tr><td>Wiggle</td><td>Minimize weighted change in slope.</td></tr><tr><td>Expand</td><td>Normalize layers to fill the range [0, 1].</td></tr><tr><td>Zero</td><td>Use a zero baseline.</td></tr></table>">Offset:</label>
	  <select id="offsetSelection" class="combobox">
	    <option value="wiggle">Wiggle</option>
	    <option value="silhouette">Silhouette</option>
	    <option value="expand">Expand</option>
	    <option value="zero">Zero</option>
	  </select>
	</div>
		<div>
	  <label for="colorschemeSelection">Scheme:</label>
	  <select id="colorschemeSelection" class="combobox">
	    <option value="1">Category10</option>
    	<option value="2">Category20</option>
    	<option value="3">Category20b</option>
    	<option value="4">Category20c</option>
    	<option value="YlGn">YlGn</option>
    	<option value="YlGnBu">YlGnBu</option>
    	<option value="GnBu">GnBu</option>
    	<option value="BuGn">BuGn</option>
	    <option value="PuBuGn">PuBuGn</option>
	    <option value="PuBu">PuBu</option>
	    <option value="BuPu">BuPu</option>
	    <option value="RdPu">RdPu</option>
	    <option value="PuRd">PuRd</option>
	    <option value="OrRd">OrRd</option>
	    <option value="YlOrRd">YlOrRd</option>
    	<option value="YlOrBr">YlOrBr</option>
    	<option value="Purples">Purples</option>
    	<option value="Blues">Blues</option>
	    <option value="Greens">Greens</option>
	    <option value="Oranges">Oranges</option>
	    <option value="Reds">Reds</option>
	    <option value="Greys">Greys</option>
	    <option value="PuOr">PuOr</option>
	    <option value="BrBG">BrBG</option>
	    <option value="PRGn">PRGn</option>
	    <option value="PiYG">PiYG</option>
	    <option value="RdBu">RdBu</option>
	    <option value="RdGy">RdGy</option>
	    <option value="RdYlBu">RdYlBu</option>
	    <option value="Spectral">Spectral</option>
	    <option value="RdYlGn">RdYlGn</option>
	    <option value="HiContrast">HiContrast</option>
	    <option value="SoftSep4WhiteBG">SoftSep4WhiteBG</option>
	    <option value="HardSep4WhiteBG">HardSep4WhiteBG</option>
	  </select>
	</div>
	<div>
		<label for="charttitle">Title:</label>
		<input type="text" id="charttitle" size="20" style="border:2; color:#f6931f; font-weight:10;" onchange="titleChange(this.value)" />
	</div>
</div>
  </body>
</html>
