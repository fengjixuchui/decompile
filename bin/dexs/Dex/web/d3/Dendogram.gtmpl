<!DOCTYPE html>
<% import com.dexvis.util.DexUtil %>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <title>Dendogram</title>

<style>
<%
   println new File("javascript/jquery-ui/latest/jquery-ui.css").text
   println new File("javascript/jquery-ui/latest/jquery-ui.theme.css").text
   println new File("web/d3/d3.css").text
%>
</style>

<script type="text/javascript">
<%
   println new File("javascript/d3/latest/d3.min.js").text
   println new File("javascript/d3/latest/lib/colorbrewer/colorbrewer.js").text
%>
</script>

<style>

#chart {
	float: left;
	width: 700px;
}

#chartConfig {
	float: right;
	width: 200px;
}h1 {
	font-family: "Arial";
	font-size: 24px;
	margin: 5px 0px 5px 0px;
	color: steelblue;
}

</style>

<script>
<%
   println new File("javascript/jquery/latest/jquery.min.js").text
   println new File("javascript/jquery-ui/latest/jquery-ui.min.js").text
%>
</script>

<style type="text/css">
#chart.ui-widget-content {
    background-color:#ffffff;
    background-image:none;
    border:none;
}

#draggable-title.ui-widget-content {
  foreground-color:#cccccc;
  background-color:#ffffff;
  background-image:none;
  border:none;
}

.node circle {
  cursor: pointer;
  fill: #fff;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.node text {
  font-size: 11px;
}

path.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}
</style>

</head>
<body>
<div id="draggable-title" class="ui-widget-content">
  <h1 id="titletext">Dendogram</h1>
</div>

<div id="settings" style="visibility: hidden">
  <div id="chartHeight" value="800"></div>
  <div id="chartWidth" value="800"></div>
  <div id="connectionLength" value="100"></div>
  <div id="fontSize" value="12"></div>
  <div id="topMargin" value="10"></div>
  <div id="bottomMargin" value="10"></div>
  <div id="leftMargin" value="80"></div>
  <div id="rightMargin" value="80"></div>
  <div id="chartRotation" value="0"></div>
  <div id="titleTop" value="0"></div>
  <div id="titleLeft" value="0"></div>
  <div id="chartTop" value="0"></div>
  <div id="chartLeft" value="0"></div>
  <div id="chartConfigTop" value="200"></div>
  <div id="chartConfigLeft" value="600"></div>
</div>

<div id="chart"></div>

<script type="text/javascript">
<%
  println DexUtil.getJSONString(dexData)
%>

var width = parseInt(d3.select("#chartWidth").attr("value"));
var height = parseInt(d3.select("#chartHeight").attr("value"));
var fontSize = parseInt(d3.select("#fontSize").attr("value"));
var topMargin = parseInt(d3.select("#topMargin").attr("value"));
var bottomMargin = parseInt(d3.select("#bottomMargin").attr("value"));
var leftMargin = parseInt(d3.select("#leftMargin").attr("value"));
var rightMargin = parseInt(d3.select("#rightMargin").attr("value"));
var connectionLength = parseInt(d3.select("#connectionLength").attr("value"));
var rotation = parseInt(d3.select("#chartRotation").attr("value"));
var titleTop = parseInt(d3.select("#titleTop").attr("value"));
var titleTop = parseInt(d3.select("#titleLeft").attr("value"));
\$("#draggable-title").position({ top : titleTop, left : titleLeft });
\$("#chart").position({ top : chartTop, left : chartLeft });
\$("#chartConfig").position({ top : chartConfigTop, left : chartConfigLeft });

Object.size = function(obj) {
    var size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) size++;
    }
    return size;
};

readJson = function(text, callback)
{
  callback(text ? JSON.parse(text) : null);
}

function draw()
{
  d3.select("#chart").html("");
  drawDendogram(width, height, fontSize, topMargin, bottomMargin, leftMargin, rightMargin, connectionLength);
}

function drawDendogram(width, height, fontSize, topMargin, bottomMargin, leftMargin, rightMargin,
                       connectionLength)
{
  var w = width - leftMargin - rightMargin,
      h = height - topMargin - bottomMargin,
      i = 0,
      root;

  var tree = d3.layout.tree()
      .size([h, w]);

  var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

  var vis = d3.select("#chart").append("svg:svg")
    .attr("width", width)
    .attr("height", height)
    .append("svg:g")
      .attr("transform", "translate(" + leftMargin + "," + topMargin + ")rotate(" + rotation + ")");

  readJson(JSON.stringify(jsonData), function(json)
  {
    root = json;
    root.x0 = h / 2;
    root.y0 = 0;

    function toggleAll(d)
    {
      if (d.children)
      {
        d.children.forEach(toggleAll);
        toggle(d);
      }
    }

    update(root);
  });

  function update(source)
  {
    var duration = d3.event && d3.event.altKey ? 5000 : 500;

    // Compute the new tree layout.
    var nodes = tree.nodes(root).reverse();

    // Variable connection lengths based on font size.
    
    var textLengths = {};
    var numItems = 0;

    nodes.forEach(function(d)
    {
      var dlen = (d.name.length * fontSize) + connectionLength;
      //var dlen = d.getBBox().width;
      if (!textLengths[d.depth] || textLengths[d.depth] < dlen)
      {
        textLengths[d.depth] = dlen;
      }
    });
    
    var maxDepth = Object.size(textLengths);

/*
    nodes.forEach(function(d)
    {
      var yloc = 0;

      for (var i=0; i<=d.depth && i < maxDepth-1; i++)
      {
        yloc += textLengths[i];
      }
      d.y = yloc;
    });
*/


    // Normalize for fixed-depth.
    nodes.forEach(function(d)
    {
      d.y = (d.depth - 1) * connectionLength;
      d.y += (d.depth == maxDepth-1) ? (connectionLength/2) : connectionLength;
    });

    // Update the nodes…
    var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

    // Enter any new nodes at the parent's previous position.
    var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("click", function(d) { toggle(d); update(d); });

    nodeEnter.append("svg:circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

    nodeEnter.append("svg:text")
      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      .style("font-size", fontSize)
      .text(function(d) { return d.name; })
      .style("fill-opacity", 1e-6);

    // Transition nodes to their new position.
    var nodeUpdate = node
      //.transition()
      //.duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });
      
    nodeUpdate.select("circle")
      .attr("r", 4.5)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

    nodeUpdate.select("text")
      .style("fill-opacity", 1);

    // Transition exiting nodes to the parent's new position.
    var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

    nodeExit.select("circle")
      .attr("r", 1e-6);

    nodeExit.select("text")
      .style("fill-opacity", 1e-6);

    // Update the links…
    var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

    // Enter any new links at the parent's previous position.
    link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d)
      {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
      //.transition()
      //.duration(duration)
      .attr("d", diagonal);

    // Transition links to their new position.
    link.transition()
      .duration(duration)
      .attr("d", diagonal);

    // Transition exiting nodes to the parent's new position.
    link.exit().transition()
      .duration(duration)
      .attr("d", function(d)
      {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

    // Stash the old positions for transition.
    nodes.forEach(function(d)
    {
      d.x0 = d.x;
      d.y0 = d.y;
    });
  }

  // Toggle children.
  function toggle(d)
  {
    if (d.children)
    {
      d._children = d.children;
      d.children = null;
    }
    else
    {
      d.children = d._children;
      d._children = null;
    }
  }
}

function toggleConfig()
{
  if (\$("#chartConfig").css('visibility') == 'hidden')
  {
    show("#chartConfig");
  }
  else
  {
    hide("#chartConfig");
  }
}
      
<%
   println """

  \$(document).keypress(function(e)
  {
    if (e.altKey) {
      console.log("Alt Pressed");
      toggleConfig();
    }
  });

   \$("#draggable-title").draggable(
   {
    stop: function(event, ui) {
    	var pos = \$(this).position();
    	d3.select("#titleTop").attr("value", pos.top);
    	d3.select("#titleLeft").attr("value", pos.left);
    }
   });

\$(function() {
 	\$( "#chartTitle" ).draggable().zIndex(3);
  \$( "#chartConfig" ).draggable().zIndex(2);
  \$( "#chart" ).draggable().zIndex(1);
  \$("#chartConfig").resizable();
});

   \$("#chart").draggable(
   {
    stop: function(event, ui) {

    	// Show dropped position.
    	var pos = \$(this).position();
    	d3.select("#chartTop").attr("value", pos.top);
    	d3.select("#chartLeft").attr("value", pos.left);
    }
   });

   \$("#chartConfig").draggable(
   {
    stop: function(event, ui) {
    	var pos = \$(this).position();
    	d3.select("#chartConfigTop").attr("value", pos.top);
    	d3.select("#chartConfigLeft").attr("value", pos.left);
    }
   });
 
	\$(function() {
		\$( "#height-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: height,
		  slide : function(event, ui)
		  {
		    height = ui.value;
		    draw();
	        \$("#height-input").val(height);
	        d3.select("#chartHeight").attr("value", height);
		  }
		});
		\$("#height-input").val(height);
		d3.select("#chartHeight").attr("value", height);
	});

    \$(function()
    {
      \$("#height-input").change(function ()
      {
          height = parseInt(this.value);
          draw();
          d3.select("#chartHeight").attr("value", height);
          \$("#height-slider").slider("value", height);
      });
    });

	\$(function() {
		\$( "#width-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: width,
		  slide : function(event, ui)
		  {
		    width = ui.value;
		    draw();
	        \$("#width-input").val(width);
	        d3.select("#chartWidth").attr("value", width);
		  }
		});
		\$("#width-input").val(width);
		d3.select("#chartWidth").attr(width);
	});

    \$(function()
    {
      \$("#width-input").change(function ()
      {
          width = parseInt(this.value);
          draw();
          d3.select("#chartWidth").attr("value", width);
          \$("#width-slider").slider("value", width);
      });
    });

	\$(function() {
		\$( "#connectionlength-slider" ).slider(
		{
	      min: 0,
		  max: 500,
		  value: connectionLength,
		  slide : function(event, ui)
		  {
		    connectionLength = ui.value;
		    draw();
	        \$("#connectionlength-input").val(connectionLength);
	        d3.select("#connectionLength").attr("value", connectionLength);
		  }
		});
		\$("#connectionlength-input").val(connectionLength);
		d3.select("#connectionLength").attr(connectionLength);
	});

    \$(function()
    {
      \$("#connectionlength-input").change(function ()
      {
          connectionLength = parseInt(this.value);
          draw();
          d3.select("#connectionLength").attr("value", connectionLength);
          \$("#connectionlength-slider").slider("value", connectionLength);
      });
    });
    
	\$(function() {
		\$( "#topmargin-slider" ).slider(
		{
	      min: -100,
		  max: 200,
		  value: topMargin,
		  slide : function(event, ui)
		  {
		    topMargin = ui.value;
		    draw();
	        \$("#topmargin-input").val(topMargin);
	        d3.select("#topMargin").attr("value", topMargin);
		  }
		});
		\$("#topmargin-input").val(topMargin);
		d3.select("#topMargin").attr("value", topMargin);
	});

    \$(function()
    {
      \$("#topmargin-input").change(function ()
      {
          topMargin = parseInt(this.value);
          draw();
          d3.select("#topMargin").attr("value", topMargin);
          \$("#topmargin-slider").slider("value", topMargin);
      });
    });
    
	\$(function() {
		\$( "#bottommargin-slider" ).slider(
		{
	      min: -100,
		  max: 200,
		  value: bottomMargin,
		  slide : function(event, ui)
		  {
		    bottomMargin = ui.value;
		    draw();
	        \$("#bottommargin-input").val(bottomMargin);
	        d3.select("#bottomMargin").attr("value", bottomMargin);
		  }
		});
		\$("#bottommargin-input").val(bottomMargin);
		d3.select("#bottomMargin").attr("value", bottomMargin);
	});

    \$(function()
    {
      \$("#bottommargin-input").change(function ()
      {
          bottomMargin = parseInt(this.value);
          draw();
          d3.select("#bottomMargin").attr("value", bottomMargin);
          \$("#bottommargin-slider").slider("value", bottomMargin);
      });
    });

	\$(function() {
		\$( "#leftmargin-slider" ).slider(
		{
	      min: -100,
		  max: 200,
		  value: leftMargin,
		  slide : function(event, ui)
		  {
		    leftMargin = ui.value;
		    draw();
	        \$("#leftmargin-input").val(leftMargin);
	        d3.select("#leftMargin-input").attr("value", leftMargin);
		  }
		});
		\$("#leftmargin").val(leftMargin);
		d3.select("#leftMargin").attr("value", leftMargin);
	});
	
    \$(function()
    {
      \$("#leftmargin-input").change(function ()
      {
          leftMargin = parseInt(this.value);
          draw();
          d3.select("#leftMargin").attr("value", leftMargin);
          \$("#leftmargin-slider").slider("value", leftMargin);
      });
    });
    
	\$(function() {
		\$( "#rightmargin-slider" ).slider(
		{
	      min: -100,
		  max: 200,
		  value: rightMargin,
		  slide : function(event, ui)
		  {
		    rightMargin = ui.value;
		    draw();
	        \$("#rightmargin-input").val(rightMargin);
	        d3.select("#rightMargin").attr("value", rightMargin);
		  }
		});
		\$("#rightmargin-input").val(rightMargin);
		d3.select("#rightMargin").attr("value", rightMargin);
	});

    \$(function()
    {
      \$("#rightmargin-input").change(function ()
      {
          rightMargin = parseInt(this.value);
          draw();
          d3.select("#rightMargin").attr("value", rightMargin);
          \$("#rightmargin-slider").slider("value", rightMargin);
      });
    });

	\$(function() {
		\$( "#rotation-slider" ).slider(
		{
	      min: 0,
		  max: 360,
		  value: rotation,
		  slide : function(event, ui)
		  {
		    rotation = ui.value;
		    draw();
	        \$("#rotation-input").val(rotation);
	        d3.select("#chartRotation").attr("value", rotation);
		  }
		});
		\$("#rotation-input").val(rotation);
		d3.select("#chartRotation").attr("value", rotation);
	});

    \$(function()
    {
      \$("#rotation-input").change(function ()
      {
          rotation = parseInt(this.value);
          draw();
          d3.select("#rotation").attr("value", rotation);
          \$("#rotation-slider").slider("value", rotation);
      });
    });

	\$(function() {
		\$( "#fontsize-slider" ).slider(
		{
	      min: 1,
		  max: 48,
		  value: fontSize,
		  slide : function(event, ui)
		  {
		    fontSize = ui.value;
		    draw();
	        \$("#fontsize-input").val(fontSize);
	        d3.select("#fontSize-input").attr("value", fontSize);
		  }
		});
		\$("#fontsize-input").val(fontSize);
		d3.select("#fontSize").attr("value", fontSize);
	});

    \$(function()
    {
      \$("#fontsize-input").change(function ()
      {
          fontSize = parseInt(this.value);
          draw();
          d3.select("#fontSize").attr("value", fontSize);
          \$("#fontsize-slider").slider("value", fontSize);
      });
    });

    \$(function() {
    	\$( "#draggable-title" ).draggable().zIndex(3);
        \$( "#chartConfig" ).draggable().zIndex(2);
        \$( "#chart" ).draggable().zIndex(1);
    });
    
function titleChange(newTitle)
{
  d3.select("title").text(newTitle);
  d3.select("#titletext").text(newTitle);
}

function hide(elt)
{
  \$(elt).css("visibility", "hidden");
}

function show(elt)
{
  \$(elt).css("visibility", "visible");
}

draw();
"""
%>
</script>

  <div id="chartConfig" class="ui-widget-content">
    <h1>Options</h1>
	<div>
		<label for="height">Height:</label>
		<input type="text" id="height-input" size="5" />
		<div id="height-slider"/>
	</div>
	<div>
		<label for="width">Width:</label>
		<input type="text" id="width-input" size="5"  />
		<div id="width-slider"/>
	</div>
    <div>
		<label for="connectionlength">Connection Length:</label>
		<input type="text" id="connectionlength-input" size="5"  />
		<div id="connectionlength-slider"/>
	</div>
	<div>
		<label for="topmargin">Top Margin:</label>
		<input type="text" id="topmargin-input" size="5"  />
		<div id="topmargin-slider"/>
	</div>
    <div>
		<label for="bottommargin">Bottom Margin:</label>
		<input type="text" id="bottommargin-input" size="5"  />
		<div id="bottommargin-slider"/>
	</div>
	<div>
		<label for="leftmargin">Left Margin:</label>
		<input type="text" id="leftmargin-input" size="5"  />
		<div id="leftmargin-slider"/>
	</div>
	<div>
		<label for="rightmargin">Right Margin:</label>
		<input type="text" id="rightmargin-input" size="5"  />
		<div id="rightmargin-slider"/>
	</div>
	<div>
		<label for="rotation">Rotation:</label>
		<input type="text" id="rotation-input" size="5"  />
		<div id="rotation-slider"/>
	</div>
    <div>
		<label>Font Size:</label>
		<input type="text" id="fontsize-input" size="5"  />
		<div id="fontsize-slider"/>
	</div>
	<div>
		<label for="charttitle">Title:</label>
		<input type="text" id="charttitle" size="20" onchange="titleChange(this.value)" />
	</div>
  </div>
</body>
</html>
