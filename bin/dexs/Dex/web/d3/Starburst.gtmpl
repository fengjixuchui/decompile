<!DOCTYPE html>
<% import com.dexvis.util.DexUtil %>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <title>Starburst</title>
<script type="text/javascript">
<%
   println new File("javascript/d3/latest/d3.min.js").text
   println new File("javascript/d3/latest/lib/colorbrewer/colorbrewer.js").text
%>
</script>

<style>
<% 
   println new File("javascript/jquery-ui/latest/jquery-ui.css").text
   println new File("javascript/jquery-ui/latest/jquery-ui.theme.css").text
   println new File("web/d3/d3.css").text
%>
</style>

<script>
<%
   println new File("javascript/jquery/latest/jquery.min.js").text
   println new File("javascript/jquery-ui/latest/jquery-ui.min.js").text
%>
</script>

<style type="text/css">

path {
  stroke: #000;
  stroke-width: 1.5;
  cursor: pointer;
}

text {
  font: 11px sans-serif;
  cursor: pointer;
}

body {
/*  width: 880px;*/
  margin: 0 auto;
}

#breadcrumbs { display: none; }
</style>
  </head>
  <body>
  <div id="chartTitle" class="ui-widget-content">
    <h1 id="titletext">Starburst</h1>
  </div>

<div id="chart"></div>

<script type="text/javascript">
var jsonData;

<% println DexUtil.getJSONString(dexData) %>

jsonData = [ jsonData ];

readJson = function(text, callback)
{
  callback(text ? JSON.parse(text) : null);
}

var width = 600,
    height = width,
    radius = width/2,
    duration = 1000,
    fontSize = 8;

function draw()
{
  d3.select("#chart").html("");
  drawStarburst(width, height, radius, duration, fontSize);
}

function drawStarburst(width, height, radius, duration, fontSize)
{
  var colorNum = 0;
  
  var x = d3.scale.linear().range([0, 2 * Math.PI]),
      y = d3.scale.pow().exponent(1.3).domain([0, 1]).range([0, radius]),
      padding = 5;

  var div = d3.select("#chart");

  div.select("img").remove();

  var vis = div.append("svg")
      .attr("width", width + padding * 2)
      .attr("height", height + padding * 2)
      .append("g")
      .attr("transform", "translate(" + [radius + padding, radius + padding] + ")");

  var partition = d3.layout.partition()
      .sort(null)
      .value(function(d) { return 5.8 - d.depth; });

  var arc = d3.svg.arc()
      .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
      .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
      .innerRadius(function(d) { return Math.max(0, d.y ? y(d.y) : d.y); })
      .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });

  readJson(JSON.stringify(jsonData), function(json)
  {
    var nodes = partition.nodes({children: json});

    var path = vis.selectAll("path").data(nodes);
    path.enter().append("path")
        .attr("id", function(d, i) { return "path-" + i; })
        .attr("d", arc)
        .attr("fill-rule", "evenodd")
        .style("fill", colour)
        .on("click", click);

    var text = vis.selectAll("text").data(nodes);
    var textEnter = text.enter().append("text")
        .style("fill-opacity", 1)
        .style("fill", function(d)
        {
          return brightness(d3.rgb(colour(d))) < 125 ? "#eee" : "#000";
        })
        .attr("text-anchor", function(d)
        {
          return x(d.x + d.dx / 2) > Math.PI ? "end" : "start";
        })
        .attr("dy", ".2em")
        .attr("transform", function(d)
        {
          var multiline = (d.name || "").split(" ").length > 1,
              angle = x(d.x + d.dx / 2) * 180 / Math.PI - 90,
              rotate = angle + (multiline ? -.5 : 0);
          return "rotate(" + rotate + ")translate(" + (y(d.y) + padding) + ")rotate(" + (angle > 90 ? -180 : 0) + ")";
        })
        .on("click", click);

    textEnter.append("tspan")
      .attr("x", 0)
      .attr("font-size", fontSize)
      .text(function(d) { return d.depth ? d.name.split(" ")[0] : ""; });

    textEnter.append("tspan")
      .attr("x", 0)
      .attr("dy", "1em")
      .attr("font-size", fontSize)
      .text(function(d) { return d.depth ? d.name.split(" ")[1] || "" : ""; });

    function click(d)
    {
      path.transition()
        .duration(duration)
        .attrTween("d", arcTween(d));

      // Somewhat of a hack as we rely on arcTween updating the scales.
      text.style("visibility", function(e)
      {
        return isParentOf(d, e) ? null : d3.select(this).style("visibility");
      })
      .transition()
      .duration(duration)
      .attrTween("text-anchor", function(d)
      {
        return function()
        {
          return x(d.x + d.dx / 2) > Math.PI ? "end" : "start";
        };
      })
      .attrTween("transform", function(d)
      {
        var multiline = (d.name || "").split(" ").length > 1;
        return function()
        {
          var angle = x(d.x + d.dx / 2) * 180 / Math.PI - 90,
              rotate = angle + (multiline ? -.5 : 0);
          return "rotate(" + rotate + ")translate(" + (y(d.y) + padding) + ")rotate(" + (angle > 90 ? -180 : 0) + ")";
        };
      })
      .style("fill-opacity", function(e) { return isParentOf(d, e) ? 1 : 1e-6; })
      .each("end", function(e)
      {
        d3.select(this).style("visibility", isParentOf(d, e) ? null : "hidden");
      });
    }
  });

  function isParentOf(p, c)
  {
    if (p === c) return true;
    if (p.children)
    {
      return p.children.some(function(d)
      {
        return isParentOf(d, c);
      });
    }
    return false;
  }

  function colour(d)
  {
    //if (d.children)
    //{
      // There is a maximum of two children!
      //var colours = d.children.map(colour),
      //  a = d3.hsl(colours[0]),
      //  b = d3.hsl(colours[1]);
      //return d3.hsl((a.h + b.h) / 2, a.s * 1.2, a.l / 1.2);
    //}
    //return d.colour || "#fff";
    var colors = d3.scale.category20().range();
    return colors[colorNum++ % colors.length]; 
  }

  // Interpolate the scales!
  function arcTween(d)
  {
    var my = maxY(d),
      xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
      yd = d3.interpolate(y.domain(), [d.y, my]),
      yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
    return function(d)
    {
      return function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); return arc(d); };
    };
  }

  function maxY(d)
  {
    return d.children ? Math.max.apply(Math, d.children.map(maxY)) : d.y + d.dy;
  }

  // http://www.w3.org/WAI/ER/WD-AERT/#color-contrast
  function brightness(rgb)
  {
    return rgb.r * .299 + rgb.g * .587 + rgb.b * .114;
  }
}

draw();

<%
   println """
	\$(function() {
		\$( "#height-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: height,
		  slide : function(event, ui)
		  {
		    height = ui.value;
		    draw();
	        \$("#height").val(\$("#height-slider").slider("value"));
		  }
		});
		\$("#height").val(\$("#height-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#width-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: width,
		  slide : function(event, ui)
		  {
		    width = ui.value;
		    draw();
	        \$("#width").val(\$("#width-slider").slider("value"));
		  }
		});
		\$("#width").val(\$("#width-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#radius-slider" ).slider(
		{
	      min: 1,
		  max: 500,
		  value: radius,
		  slide : function(event, ui)
		  {
		    radius = ui.value;
		    draw();
	        \$("#width").val(\$("#radius-slider").slider("value"));
		  }
		});
		\$("#radius").val(\$("#radius-slider").slider("value"));
	});
"""
   println """
	\$(function() {
		\$( "#fontsize-slider" ).slider(
		{
	      min: 1,
		  max: 48,
		  value: fontSize,
		  slide : function(event, ui)
		  {
		    fontSize = ui.value;
		    draw();
	        \$("#fontsize").val(\$("#fontsize-slider").slider("value"));
		  }
		});
		\$("#fontsize").val(\$("#fontsize-slider").slider("value"));
	});
"""
   println """
    \$(function() {
    	\$( "#chartTitle" ).draggable();
        \$( "#chartConfig" ).draggable();
        \$( "#chart" ).draggable();
    });
    
function titleChange(newTitle)
{
  d3.select("title").text(newTitle);
  d3.select("#titletext").text(newTitle);
}

"""
%>
</script>
    
<div id="chartConfig" class="demo">
    <h1>Configuration</h1>
	<div>
		<label for="height">Height:</label>
		<input type="text" id="height" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="height-slider"/>
	</div>
	<div>
		<label for="width">Width:</label>
		<input type="text" id="width" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="width-slider"/>
	</div>
	<div>
		<label for="radius">Radius:</label>
		<input type="text" id="radius" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="radius-slider"/>
	</div>
	<div>
		<label for="fontsize">Font Size:</label>
		<input type="text" id="fontsize" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="fontsize-slider"/>
	</div>
	<div>
		<label for="charttitle">Title:</label>
		<input type="text" id="charttitle" size="20" style="border:2; color:#f6931f; font-weight:10;" onchange="titleChange(this.value)" />
	</div>
</div>
  </body>
</html>
