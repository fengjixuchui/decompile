<!DOCTYPE html>
<style>
<%
   println new File("javascript/jquery-ui/latest/jquery-ui.min.css").text
   println new File("javascript/jquery-ui/latest/jquery-ui.theme.min.css").text
%>
</style>

<script type="text/javascript">
<%
println new File("javascript/d3/latest/d3.min.js").text
println new File("javascript/d3/latest/lib/colorbrewer/colorbrewer.min.js").text
println new File("javascript/jquery/latest/jquery.min.js").text
println new File("javascript/jquery-ui/latest/jquery-ui.min.js").text
println new File("javascript/touchpunch/latest/touchpunch.js").text
println new File("javascript/dex/dexutils.js").text
%>
</script>

<html>
  <head>
    <title>Chord Diagram</title>

<style type="text/css">

<% println new File("web/d3/d3.css").text %>
</style>

<style type="text/css">
#chart {
  font: 10px sans-serif;
}

.chord path {
  fill-opacity: .67;
  stroke: #000;
  stroke-width: .5px;
}
</style>
  </head>
<body>

<div id="chartTitle" class="ui-widget-content">
  <h1 id="titletext">Chord Diagram</h1>
</div>
<div id="settings" style="visibility: hidden">
  <div id="chartHeight" value="800"></div>
  <div id="chartWidth" value="800"></div>
  <div id="innerRadius" value="180"></div>
  <div id="outerRadius" value="200"></div>
  <div id="fontSize" value="12"></div>
  <div id="tickLength" value="5"></div>
  <div id="opacity" value="50"></div>
  <div id="chordOpacity" value="50"></div>
  <div id="strokeWidth" value="4"></div>
  <div id="titleTop" value="0"></div>
  <div id="titleLeft" value="0"></div>
  <div id="chartTop" value="0"></div>
  <div id="chartLeft" value="0"></div>
  <div id="chartConfigTop" value="200"></div>
  <div id="chartConfigLeft" value="600"></div>
  <div id="colorScheme" value="1"></div>
</div>
<div id="chart" class="ui-widget-content"></div>

<script type="text/javascript">

var width       = parseInt(d3.select("#chartWidth").attr("value"));
var height      = parseInt(d3.select("#chartHeight").attr("value"));
var innerRadius = parseInt(d3.select("#innerRadius").attr("value"));
var outerRadius = parseInt(d3.select("#outerRadius").attr("value"));
var fontSize    = parseInt(d3.select("#fontSize").attr("value"));
var tickLength  = parseInt(d3.select("#tickLength").attr("value"));
var opacity     = parseInt(d3.select("#opacity").attr("value"));
var chordOpacity = parseInt(d3.select("#opacity").attr("value"));
var strokeWidth = parseInt(d3.select("#strokeWidth").attr("value"));
var colorScheme = d3.select("#colorScheme").attr("value");
var titleTop = d3.select("#titleTop").attr("value");
var titleTop = d3.select("#titleLeft").attr("value");
var chartTop = parseInt(d3.select("#chartTop").attr("value"));
var chartLeft = parseInt(d3.select("#chartLeft").attr("value"));
var chartConfigTop = parseInt(d3.select("#chartConfigTop").attr("value"));
var chartConfigLeft = parseInt(d3.select("#chartConfigLeft").attr("value"));

\$("#chartTitle").position({ top : titleTop, left : titleLeft });
\$("#chart").position({ top : chartTop, left : chartLeft });
\$("#chartConfig").position({ top : chartConfigTop, left : chartConfigLeft });

var fill = getFill(colorScheme);

d3.selection.prototype.size = function()
{
  var n = 0;
  this.each(function() { ++n; });
  return n;
}

function draw()
{
  \$("#chart").html("");
  drawChord(width, height, innerRadius, outerRadius, fontSize, colorScheme)
}

function drawChord(width, height, innerRadius, outerRadius, fontSize, colorScheme)
{
<%
   def links = [:]
   def entries = []
   
   // Get unique node list.
   data.each
   {
     row ->
     row.each
     {
       col ->
       links[col] = []
     }
   }

   // Create connection map.
   data.each
   {
     row ->
     (0..(row.size()-2)).each
     {
       si ->
       (si..(row.size()-2)).each
       {
         ti ->
         links[row[si]] << row[ti+1]
       }
     }
   }

   // Create map of link name to index:
   def link2idx = [:]
   int linkNum = 0
   links.each
   {
     key, value ->
     link2idx[key] = linkNum
     linkNum++
   }

   def matrix = new int[links.size()][links.size()]

   def size = matrix.length - 1;
   
   // Initialize empty matrix
   (0..size).each
   {
     i ->
     matrix[i] = new int[size+1]
     (0..size).each
     {
       j ->
       matrix[i][j] = 0
     }
   }

   links.each
   {
     name, connections ->
     i = link2idx[name]
     connections.each
     {
       cname ->
       j = link2idx[cname]
       matrix[i][j] = 1
       matrix[j][i] = 1
     }
   }

   println "var chordData = $matrix;"
   println "var header = " + links.keySet().collect{ "\"$it\"" } + ";"
%>

var chord = d3.layout.chord()
    .padding(.05)
    .sortSubgroups(d3.descending)
    .matrix(chordData);

//var fill = d3.scale.ordinal()
//    .domain(d3.range(4))
//    .range(["#000000", "#FFDD89", "#957244", "#F26223"]);

var svg = d3.select("#chart")
  .append("svg")
    .attr("width", width)
    .attr("height", height)
  .append("g")
    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

svg.append("g")
  .selectAll("path")
    .data(chord.groups)
  .enter().append("path")
    .attr("id", "fillpath")
    .style("fill", function(d) { return fill(d.index); })
    .style("stroke", function(d) { return fill(d.index); })
    .style("opacity", opacity/100.0)
    .attr("d",
      d3.svg.arc()
        .innerRadius(innerRadius)
        .outerRadius(outerRadius))
    .on("mouseover", fade(.2))
    .on("mouseout", fade(1));

var ticks = svg.append("g")
  .selectAll("g")
    .data(chord.groups)
  .enter().append("g")
  .selectAll("g")
    .data(groupTicks)
  .enter().append("g")
    .attr("transform", function(d) {
      //console.dir(this.parentNode);
      // Probably a bad idea, but getting parent angle data from parent.
      var startAngle = this.parentNode.__data__.startAngle;
      var endAngle = this.parentNode.__data__.endAngle;
      var midAngle = startAngle + (endAngle-startAngle)/2.0;
      return "rotate(" + (midAngle * 180 / Math.PI - 90) + ")"
          + "translate(" + outerRadius + ",0)";
    });

ticks.append("line")
    .attr("x1", 1)
    .attr("y1", 0)
    .attr("x2", tickLength)
    .attr("y2", 0)
    .attr("stroke-width", strokeWidth)
    .style("stroke", "#000");

ticks.append("text")
    .attr("x", tickLength + (tickLength / 4))
    .attr("dy", ".35em")
    .attr("font-size", fontSize)
    .attr("text-anchor", function(d) {
      return d.angle > Math.PI ? "end" : null;
    })
    .attr("transform", function(d) {
      return d.angle > Math.PI ? "rotate(180)translate(-" +
        ((tickLength * 2) + (tickLength / 2)) + ")" : null;
    })
    .text(function(d) { return d.label; });

svg.append("g")
    .attr("class", "chord")
  .selectAll("path")
    .data(chord.chords)
  .enter().append("path")
    .style("fill", function(d) { return fill(d.target.index); })
    .style("opacity", chordOpacity/100.0)
    .attr("d", d3.svg.chord().radius(innerRadius));

/** Returns an array of tick angles and labels, given a group. */
function groupTicks(d) {
  var k = (d.endAngle - d.startAngle) / d.value;
  return d3.range(0, d.value, 1000).map(function(v, i) {
    return {
      angle: v * k + d.startAngle,
      //label: i % 5 ? null : v / 1000 + "k"
      label: header[d.index]
    };
  });
}

/** Returns an event handler for fading a given chord group. */
function fade(opacity) {
  return function(g, i) {
    svg.selectAll("g.chord path")
        .filter(function(d) {
          return d.source.index != i && d.target.index != i;
        })
      .transition()
        .style("opacity", opacity);
  };
}

}

draw();

<%
   println """

  function toggleConfig()
  {
    if (\$("#chartConfig").css('visibility') == 'hidden')
    {
      show("#chartConfig");
    }
    else
    {
      hide("#chartConfig");
    }
  }

function hide(elt)
{
  \$(elt).css("visibility", "hidden");
}

function show(elt)
{
  \$(elt).css("visibility", "visible");
}

  \$(function() {
  	\$( "#chartTitle" ).draggable().zIndex(3);
    \$( "#chartConfig" ).draggable().zIndex(2);
    \$( "#chart" ).draggable().zIndex(1);
  });

  \$(document).keypress(function(e)
  {
    if (e.altKey) {
      console.log("Alt Pressed");
      toggleConfig();
    }
  });

   \$("#chartTitle").draggable(
   {
    stop: function(event, ui) {
    	var pos = \$(this).position();
    	d3.select("#titleTop").attr("value", pos.top);
    	d3.select("#titleLeft").attr("value", pos.left);
    }
   });

   \$("#chart").draggable(
   {
    stop: function(event, ui) {

    	// Show dropped position.
    	var pos = \$(this).position();
    	d3.select("#chartTop").attr("value", pos.top);
    	d3.select("#chartLeft").attr("value", pos.left);
    }
   });

   \$("#chartConfig").draggable(
   {
    stop: function(event, ui) {
    	var pos = \$(this).position();
    	d3.select("#chartConfigTop").attr("value", pos.top);
    	d3.select("#chartConfigLeft").attr("value", pos.left);
    }
   });

   
   \$(function() {
     \$("#chartConfig").resizable();
     });
   
	\$(function() {
		\$( "#height-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: height,
		  slide : function(event, ui)
		  {
		    height = ui.value;
		    draw();
	        \$("#height-input").val(height);
	        d3.select("#chartHeight").attr("value", height);
		  }
		});
		\$("#height-input").val(height);
		d3.select("#chartHeight").attr("value", height);
	});

    \$(function()
    {
      \$("#height-input").change(function ()
      {
          height = parseInt(this.value);
          draw();
          d3.select("#chartHeight").attr("value", height);
          \$("#height-slider").slider("value", height);
      });
    });

	\$(function() {
		\$( "#width-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: width,
		  slide : function(event, ui)
		  {
		    width = ui.value;
		    draw();
	        \$("#width-input").val(width);
	        d3.select("#chartWidth").attr("value", width);
		  }
		});
		\$("#width-input").val(width);
		d3.select("#chartWidth").attr(width);
	});

    \$(function()
    {
      \$("#width-input").change(function ()
      {
          width = parseInt(this.value);
          draw();
          d3.select("#chartWidth").attr("value", width);
          \$("#width-slider").slider("value", width);
      });
    });

	\$(function() {
		\$( "#innerradius-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: innerRadius,
		  slide : function(event, ui)
		  {
		    innerRadius = ui.value;
	        draw();
	        \$("#innerradius-input").val(innerRadius);
	        d3.select("#innerRadius").attr("value", innerRadius);
		  }
		});
		\$("#innerradius-input").val(innerRadius);
		d3.select("#innerRadius").attr("value", innerRadius);
	});

    \$(function()
    {
      \$("#innerradius-input").change(function ()
      {
          innerRadius = parseInt(this.value);
          draw();
          d3.select("#innerRadius").attr("value", innerRadius);
          \$("#innerradius-slider").slider("value", innerRadius);
      });
    });

	\$(function() {
		\$( "#outerradius-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: outerRadius,
		  slide : function(event, ui)
		  {
		    outerRadius = ui.value;
	        \$(draw());
	        \$("#outerradius-input").val(outerRadius);
	        d3.select("#outerRadius").attr("value", outerRadius);
		  }
		});
		\$("#outerradius-input").val(outerRadius);
		d3.select("#outerRadius").attr("value", outerRadius);
	});

    \$(function()
    {
      \$("#outerradius-input").change(function ()
      {
          outerRadius = parseInt(this.value);
          draw();
          d3.select("#outerRadius").attr("value", outerRadius);
          \$("#outerradius-slider").slider("value", outerRadius);
      });
    });

	\$(function() {
		\$( "#fontsize-slider" ).slider(
		{
	    min: 0,
		  max: 128,
		  value: fontSize,
		  slide : function(event, ui)
		  {
		    fontSize = ui.value;
		    draw();
		    d3.select("#fontSize").attr("value", fontSize);
	        \$("#fontsize-input").val(fontSize);
		  }
		});
		\$("#fontsize-input").val(fontSize);
		d3.select("#fontSize").attr("value", fontSize);
	});

    \$(function()
    {
      \$("#fontsize-input").change(function ()
      {
          fontSize = parseInt(this.value);
          draw();
          d3.select("#fontSize").attr("value", fontSize);
          \$("#fontsize-slider").slider("value", fontSize);
      });
    });

	\$(function() {
		\$( "#ticklength-slider" ).slider(
		{
	      min: 0,
		  max: 100,
		  value: tickLength,
		  slide : function(event, ui)
		  {
		    tickLength = ui.value;
		    draw();
		    d3.select("#tickLength").attr("value", tickLength);
	        \$("#ticklength-input").val(tickLength);
		  }
		});
		\$("#ticklength-input").val(tickLength);
		d3.select("#tickLength").attr("value", tickLength);
	});

    \$(function()
    {
      \$("#ticklength-input").change(function ()
      {
          tickLength = parseInt(this.value);
          draw();
          d3.select("#tickLength").attr("value", tickLength);
          \$("#ticklength-slider").slider("value", tickLength);
      });
    });

	\$(function() {
		\$( "#opacity-slider" ).slider(
		{
	      min: 0,
		  max: 100,
		  value: opacity,
		  slide : function(event, ui)
		  {
		    opacity = ui.value;
	        draw();
	        \$("#opacity-input").val(opacity);
	        d3.select("#opacity").attr("value", opacity);
		  }
		});
		\$("#opacity-input").val(opacity);
		d3.select("#opacity").attr("value", opacity);
	});

    \$(function()
    {
      \$("#opacity-input").change(function ()
      {
          opacity = parseInt(this.value);
          draw();
          d3.select("#opacity").attr("value", opacity);
          \$("#opacity-slider").slider("value", opacity);
      });
    });

	\$(function() {
		\$( "#chordopacity-slider" ).slider(
		{
	      min: 0,
		  max: 100,
		  value: chordOpacity,
		  slide : function(event, ui)
		  {
		    chordOpacity = ui.value;
	        draw();
	        \$("#chordopacity-input").val(chordOpacity);
	        d3.select("#chordOpacity").attr("value", chordOpacity);
		  }
		});
		\$("#chordopacity-input").val(chordOpacity);
		d3.select("#chordOpacity").attr("value", chordOpacity);
	});

    \$(function()
    {
      \$("#chordopacity-input").change(function ()
      {
          chordOpacity = parseInt(this.value);
          draw();
          d3.select("#chordOpacity").attr("value", chordOpacity);
          \$("#chordopacity-slider").slider("value", chordOpacity);
      });
    });

	\$(function() {
		\$( "#strokewidth-slider" ).slider(
		{
	      min: 0,
		  max: 50,
		  value: strokeWidth,
		  slide : function(event, ui)
		  {
		    strokeWidth = ui.value;
	        draw();
	        \$("#strokewidth-input").val(strokeWidth);
	        d3.select("#strokeWidth").attr("value", strokeWidth);
		  }
		});
		\$("#strokewidth-input").val(strokeWidth);
		d3.select("#strokeWidth").attr("value", strokeWidth);
	});

    \$(function()
    {
      \$("#strokewidth-input").change(function ()
      {
          strokeWidth = parseInt(this.value);
          draw();
          d3.select("#strokeWidth").attr("value", strokeWidth);
          \$("#strokewidth-slider").slider("value", strokeWidth);
      });
    });

    \$(function()
    {
      \$("#colorschemeSelection").change(function ()
      {
          colorScheme = this.value;
          fill = getFill(colorScheme);
          draw();
          d3.select("#colorScheme").attr("value", colorScheme);
      });
    });

function titleChange(newTitle)
{
  document.title = newTitle;
  document.getElementById("titletext").innerHTML = newTitle;
}
"""

%>

</script>

  <div id="chartConfig" class="ui-widget-content">
    <h1>Options</h1>
	<div>
		<label for="height">Height:</label>
		<input type="text" id="height-input" size="5" />
		<div id="height-slider"/>
	</div>
	<div>
		<label for="width">Width:</label>
		<input type="text" id="width-input" size="5" />
		<div id="width-slider"/>
	</div>
	<div>
		<label for="innerradius">Inner Radius:</label>
		<input type="text" id="innerradius-input" size="5" />
		<div id="innerradius-slider"/>
	</div>
	<div>
		<label for="outerradius">Outer Radius:</label>
		<input type="text" id="outerradius-input" size="5" />
		<div id="outerradius-slider"/>
	</div>
	<div>
		<label for="fontsize">Font Size:</label>
		<input type="text" id="fontsize-input" size="5" />
		<div id="fontsize-slider"/>
	</div>
	<div>
		<label for="ticklength">Tick Length:</label>
		<input type="text" id="ticklength-input" size="5" />
		<div id="ticklength-slider"/>
	</div>
    <div>
	  <label for="opacity">Opacity:</label>
	  <input type="text" id="opacity-input" size="5" />
	  <div id="opacity-slider"/>
    </div>
    <div>
	  <label for="chordopacity">Chord Opacity:</label>
	  <input type="text" id="chordopacity-input" size="5" />
	  <div id="chordopacity-slider"/>
    </div>
    <div>
	  <label for="strokewidth">Stroke Width:</label>
	  <input type="text" id="strokewidth-input" size="5" />
	  <div id="strokewidth-slider"/>
    </div>
	<div>
	  <label for="colorschemeSelection">Scheme:</label>
	  <select id="colorschemeSelection" class="combobox">
	    <option value="1">Category10</option>
    	<option value="2">Category20</option>
    	<option value="3">Category20b</option>
    	<option value="4">Category20c</option>
    	<option value="YlGn">YlGn</option>
    	<option value="YlGnBu">YlGnBu</option>
    	<option value="GnBu">GnBu</option>
    	<option value="BuGn">BuGn</option>
	    <option value="PuBuGn">PuBuGn</option>
	    <option value="PuBu">PuBu</option>
	    <option value="BuPu">BuPu</option>
	    <option value="RdPu">RdPu</option>
	    <option value="PuRd">PuRd</option>
	    <option value="OrRd">OrRd</option>
	    <option value="YlOrRd">YlOrRd</option>
    	<option value="YlOrBr">YlOrBr</option>
    	<option value="Purples">Purples</option>
    	<option value="Blues">Blues</option>
	    <option value="Greens">Greens</option>
	    <option value="Oranges">Oranges</option>
	    <option value="Reds">Reds</option>
	    <option value="Greys">Greys</option>
	    <option value="PuOr">PuOr</option>
	    <option value="BrBG">BrBG</option>
	    <option value="PRGn">PRGn</option>
	    <option value="PiYG">PiYG</option>
	    <option value="RdBu">RdBu</option>
	    <option value="RdGy">RdGy</option>
	    <option value="RdYlBu">RdYlBu</option>
	    <option value="Spectral">Spectral</option>
	    <option value="RdYlGn">RdYlGn</option>
	    <option value="HiContrast">HiContrast</option>
	    <option value="SoftSep4WhiteBG">SoftSep4WhiteBG</option>
	    <option value="HardSep4WhiteBG">HardSep4WhiteBG</option>
	  </select>
	</div>
	<div>
		<label for="charttitle">Title:</label>
		<input type="text" id="charttitle" onchange="titleChange(this.value)" />
	</div>
  </div>
</body>
</html>
