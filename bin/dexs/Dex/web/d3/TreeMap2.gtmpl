<!DOCTYPE html>
<% import com.dexvis.util.DexUtil %>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <title>Tree Map</title>

<script type="text/javascript">
<%
println new File("javascript/d3/3.0.2/d3.min.js").text
println new File("javascript/d3/3.0.2/lib/colorbrewer/colorbrewer.js").text
%>
</script>

<style>
<% println new File("javascript/jquery/1.9.1/css/ui-lightness/jquery-ui-1.9.1.custom.css").text %>
<% println new File("web/d3/d3.css").text %>
</style>

<script>
<%
println new File("javascript/jquery/1.9.1/js/jquery-1.8.2.js").text
println new File("javascript/jquery/1.9.1/js/jquery-ui-1.9.1.custom.min.js").text
%>
</script>

<style type="text/css">

text
{
  font-size: 14px;
}

rect
{
  fill: none;
}
</style>

</head>
<body>
<div id="chartTitle" class="ui-widget-content">
  <h1 id="titletext">TreeMap</h1>
</div>

<div id="settings" style="visibility: hidden">
  <div id="chartHeight" value="800"></div>
  <div id="chartWidth" value="800"></div>
  <div id="fontSize" value="12"></div>
  <div id="padding" value="15"></div>
  <div id="opacity" value="90"></div>
  <div id="colorScheme" value="1"></div>
  
  <div id="titleTop" value="0"></div>
  <div id="titleLeft" value="0"></div>
  <div id="chartTop" value="0"></div>
  <div id="chartLeft" value="0"></div>
  <div id="chartConfigTop" value="200"></div>
  <div id="chartConfigLeft" value="600"></div>
</div>

<div id="chart"><svg id="chartSvg"><defs id="gradients"></defs></svg></div>

<script type="text/javascript">
<%
  def numericColumns = dexData.getNumericColumns()
  def header = dexData.getHeader()
  def lastHeader = header[header.size() - 1]
  
  if (lastHeader in numericColumns)
  {
    println DexUtil.getSizedJSONString(dexData)
  }
  else
  {
    println DexUtil.getJSONString(dexData,
    {
      key, conMap ->
      if (conMap == null || conMap.size() == 0)
      {
        ", \"size\": 100"
      }
      else
      {
        ""
      }
    })
  }
%>

var fill;

readJson = function(text, callback)
{
  callback(text ? JSON.parse(text) : null);
}

function shadeColor(color, percent) {

    var R = parseInt(color.substring(1,3),16)
    var G = parseInt(color.substring(3,5),16)
    var B = parseInt(color.substring(5,7),16);

    R = parseInt(R * (100 + percent) / 100);
    G = parseInt(G * (100 + percent) / 100);
    B = parseInt(B * (100 + percent) / 100);

    R = (R<255)?R:255;  
    G = (G<255)?G:255;  
    B = (B<255)?B:255;  

    var RR = ((R.toString(16).length==1)?"0"+R.toString(16):R.toString(16));
    var GG = ((G.toString(16).length==1)?"0"+G.toString(16):G.toString(16));
    var BB = ((B.toString(16).length==1)?"0"+B.toString(16):B.toString(16));

    return "#"+RR+GG+BB;
}

<% println new File("javascript/dex/dexutils.js").text %>

function gradient(baseColor)
{
  if (baseColor.charAt(0) == 'r')
  {
    baseColor = colorToHex(baseColor);
  }
  var gradientId;
  gradientId = "gradient" + baseColor.substring(1)
  
  //console.log("gradientId:" + gradientId);

  var lightColor = shadeColor(baseColor, 20)
  var darkColor = shadeColor(baseColor, -20) 
  
  var grad = d3.select("#gradients").selectAll("#" + gradientId)
    .data([ gradientId ])
    .enter()
    .append("linearGradient")
    .attr("class", "colorGradient")
    .attr("id", gradientId)
    .attr("gradientUnits", "objectBoundingBox");

  grad.append("stop")
    .attr("offset", "0%")
    .attr("style", "stop-color:" + darkColor)

  // Middle
  grad.append("stop")
    .attr("offset", "40%")
    .attr("style", "stop-color:" + lightColor)

  // Outer Edges
  grad.append("stop")
    .attr("offset", "100%")
    .attr("style", "stop-color:" + darkColor)

  return "url(#" + gradientId + ")";
}

function setColorScheme()
{
  if (colorScheme == 1)
  {
   fill = d3.scale.category10();
  }
  else if (colorScheme == 2)
  {
    fill = d3.scale.category20();
  }
  else if (colorScheme == 3)
  {
    fill = d3.scale.category20b();
  }
  else if (colorScheme == 4)
  {
    fill = d3.scale.category20c();
  }
  else if (colorScheme in colorbrewer)
  {
    //console.log(colorScheme)
    fill = d3.scale.ordinal().range(colorbrewer[colorScheme][9]);
  }
  else
  {
    fill = d3.scale.category20();
  }
  
  console.log("SetColorScheme()");
  // FOO
  //d3.select("#gradients").html("");
  d3.selectAll(".colorGradient").remove();

  console.log("chartSvg: " + d3.select("#chartSvg"));

  //var rects = d3.select("#chartSvg").selectAll("g.cell").selectAll("rect")
  // .text(function(d) { console.log("D.name" + d.name); return d.name; })
  // .style("fill", function(d) { console.log("D.name" + d.name); return gradient(fill(d.name)); });

  //rects.append("svg:text")
  //  .text(function(d) { return d.name; });
}

var width    = d3.select("#chartWidth").attr("value");
var height   = d3.select("#chartHeight").attr("value");
var fontSize = d3.select("#fontSize").attr("value");
var padding  = d3.select("#padding").attr("value");
var opacity = d3.select("#opacity").attr("value");
var colorScheme = d3.select("#colorScheme").attr("value");
var titleTop = d3.select("#titleTop").attr("value");
var titleTop = d3.select("#titleLeft").attr("value");
var chartTop = d3.select("#chartTop").attr("value");
var chartLeft = d3.select("#chartLeft").attr("value");
var chartConfigTop = d3.select("#chartConfigTop").attr("value");
var chartConfigLeft = d3.select("#chartConfigLeft").attr("value");
\$("#chartTitle").position({ top : titleTop, left : titleLeft });
\$("#chart").position({ top : chartTop, left : chartLeft });
\$("#chartConfig").position({ top : chartConfigTop, left : chartConfigLeft });

function draw()
{
  //d3.select("#chart").html("");
  drawTreeMap(width, height, fontSize, opacity, colorScheme);
}

function drawTreeMap(width, height, fontSize, opacity, colorScheme)
{
  var w = width,
    h = height,
    x = d3.scale.linear().range([0, w]),
    y = d3.scale.linear().range([0, h]),
    root,
    node;

  var treemap = d3.layout.treemap()
    .round(false)
    .size([w, h])
    .sticky(true)
    .value(function(d) { return d.size; });

  var svg = d3.select("#chartSvg")
    .attr("width", w)
    .attr("height", h);

  svg.append("g")
    .attr("transform", "translate(.5,.5)");

  readJson(JSON.stringify(jsonData), function(data)
  {
    node = root = data;

    var nodes = treemap.nodes(root)
      .filter(function(d) { return !d.children; });

    var cell = svg.selectAll("g")
      .data(nodes)
      .enter().append("svg:g")
      .attr("class", "cell")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .on("click", function(d) { return zoom(node == d.parent ? root : d.parent); });

    var rects = cell.append("svg:rect")
      .attr("width", function(d) { return d.dx - 1; })
      .attr("height", function(d) { return d.dy - 1; })
      .style("opacity", opacity / 100.0)
      //.style("fill", function(d) { return fill(d.parent.name); });
      .style("fill", function(d) { return gradient(fill(d.parent.name)); });

    cell.append("svg:text")
      .attr("x", function(d) { return d.dx / 2; })
      .attr("y", function(d) { return d.dy / 2; })
      .attr("dy", ".35em")
      .style("font-size", function(d)
      {
        var dynamicSize = Math.round(d.parent.width / d.name.length);
        console.log("DYNAMIC SIZE: " + d.name + " - " + d.parent.width + "/" + d.name.length + "=" + dynamicSize);
        if (dynamicSize < 12)
        {
          dynamicSize = 12;
        }

        return dynamicSize + "px";
      })
      .attr("text-anchor", "middle")
      .text(function(d) { console.log("NAME: " + d.name); return d.name; })
      .style("opacity", function(d) { d.w = this.getComputedTextLength(); return d.dx > d.w ? 1 : 0; });

    d3.select(window).on("click", function() { zoom(root); });

    d3.select("select").on("change", function()
    {
      treemap.value(this.value == "size" ? size : count).nodes(root);
      zoom(node);
    });
  });

  function size(d)
  {
    return d.size;
  }

  function count(d)
  {
    return 1;
  }

  function zoom(d)
  {
    var kx = w / d.dx, ky = h / d.dy;
    x.domain([d.x, d.x + d.dx]);
    y.domain([d.y, d.y + d.dy]);

    var t = svg.selectAll("g.cell").transition()
      .duration(d3.event.altKey ? 7500 : 750)
      .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });

    t.select("rect")
      .attr("width", function(d) { return kx * d.dx - 1; })
      .attr("height", function(d) { return ky * d.dy - 1; })
      .style("opacity", opacity/100.0)
      .text(function(d) { return d.name; });

    t.select("text")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", function(d) { return ky * d.dy / 2; })
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; })
      .style("font-size", function(d)
      {
        var dynamicSize = Math.round(kx * d.dx / d.name.length);
        console.log("ZOOM DYNAMIC SIZE: " + d.name + " - " + d.parent.width + "/" + d.name.length + "=" + dynamicSize);
        if (dynamicSize < 12)
        {
          dynamicSize = 12;
        }

        return dynamicSize + "px";
      });

    node = d;
    d3.event.stopPropagation();
  }
}

setColorScheme();
draw();

<%
   println """
   
function toggleConfig()
{
  if (\$("#chartConfig").css('visibility') == 'hidden')
  {
    show("#chartConfig");
  }
  else
  {
    hide("#chartConfig");
  }
}

function hide(elt)
{
  \$(elt).css("visibility", "hidden");
}

function show(elt)
{
  \$(elt).css("visibility", "visible");
}

\$(function()
{
  \$( "#chartTitle" ).draggable().zIndex(3);
  \$( "#chartConfig" ).draggable().zIndex(2);
  \$( "#chart" ).draggable().zIndex(1);
});

  \$(document).keypress(function(e)
  {
    if (e.altKey) {
      console.log("Alt Pressed");
      toggleConfig();
    }
  });

   \$("#chartTitle").draggable(
   {
    stop: function(event, ui) {
    	var pos = \$(this).position();
    	d3.select("#titleTop").attr("value", pos.top);
    	d3.select("#titleLeft").attr("value", pos.left);
    }
   });

   \$("#chart").draggable(
   {
    stop: function(event, ui) {

    	// Show dropped position.
    	var pos = \$(this).position();
    	d3.select("#chartTop").attr("value", pos.top);
    	d3.select("#chartLeft").attr("value", pos.left);
    }
   });

   \$("#chartConfig").draggable(
   {
    stop: function(event, ui) {
    	var pos = \$(this).position();
    	d3.select("#chartConfigTop").attr("value", pos.top);
    	d3.select("#chartConfigLeft").attr("value", pos.left);
    }
   });
 
	\$(function() {
		\$( "#height-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: height,
		  slide : function(event, ui)
		  {
		    height = ui.value;
		    draw();
	        \$("#height-input").val(height);
	        d3.select("#chartHeight").attr("value", height);
		  }
		});
		\$("#height-input").val(height);
		d3.select("#chartHeight").attr("value", height);
	});

    \$(function()
    {
      \$("#height-input").change(function ()
      {
          height = parseInt(this.value);
          draw();
          d3.select("#chartHeight").attr("value", height);
          \$("#height-slider").slider("value", height);
      });
    });

	\$(function() {
		\$( "#width-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: width,
		  slide : function(event, ui)
		  {
		    width = ui.value;
		    draw();
	        \$("#width-input").val(width);
	        d3.select("#chartWidth").attr("value", width);
		  }
		});
		\$("#width-input").val(width);
		d3.select("#chartWidth").attr(width);
	});

    \$(function()
    {
      \$("#width-input").change(function ()
      {
          width = parseInt(this.value);
          draw();
          d3.select("#chartWidth").attr("value", width);
          \$("#width-slider").slider("value", width);
      });
    });

	\$(function() {
		\$( "#padding-slider" ).slider(
		{
	      min: 0,
		  max: 200,
		  value: padding,
		  slide : function(event, ui)
		  {
		    padding = ui.value;
	        draw();
	        \$("#padding-input").val(padding);
	        d3.select("#padding").attr("value", padding);
		  }
		});
		\$("#padding-input").val(padding);
		d3.select("#padding").attr("value", padding);
	});

    \$(function()
    {
      \$("#padding-input").change(function ()
      {
          padding = parseInt(this.value);
          draw();
          d3.select("#padding").attr("value", padding);
          \$("#padding-slider").slider("value", padding);
      });
    });

	\$(function() {
		\$( "#opacity-slider" ).slider(
		{
	      min: 0,
		  max: 100,
		  value: opacity,
		  slide : function(event, ui)
		  {
		    opacity = ui.value;
		    d3.select("#opacity").attr("value", opacity);
	        draw();
	        \$("#opacity-input").val(opacity);
		  }
		});
		\$("#opacity-input").val(opacity);
		d3.select("#opacity").attr("value", opacity);
	});

    \$(function()
    {
      \$("#opacity-input").change(function ()
      {
          opacity = parseInt(this.value);
          d3.select("#opacity").attr("value", opacity);
          draw();
          \$("#opacity-slider").slider("value", opacity);
      });
    });

	\$(function() {
		\$( "#fontsize-slider" ).slider(
		{
	      min: 0,
		  max: 100,
		  value: fontSize,
		  slide : function(event, ui)
		  {
		    fontSize = ui.value;
		    d3.select("#fontsize").attr("value", fontSize);
	        draw();
	        \$("#fontsize-input").val(fontSize);
		  }
		});
		\$("#fontsize-input").val(fontSize);
		d3.select("#fontsize").attr("value", fontSize);
	});

    \$(function()
    {
      \$("#fontsize-input").change(function ()
      {
          fontSize = parseInt(this.value);
          d3.select("#fontsize").attr("value", fontSize);
          draw();
          \$("#fontsize-slider").slider("value", fontSize);
      });
    });

    \$(function()
    {
      \$("#colorschemeSelection").change(function ()
      {
          colorScheme = this.value;
          d3.select("#colorScheme").attr("value", colorScheme);
          setColorScheme();
          draw();
      });
    });
    
function titleChange(newTitle)
{
  d3.select("title").text(newTitle);
  d3.select("#titletext").text(newTitle);
}
"""
%>
</script>
    
<div id="chartConfig" class="demo">
    <h1>Configuration</h1>
	<div>
		<label for="height">Height:</label>
		<input type="text" id="height-input" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="height-slider"/>
	</div>
	<div>
		<label for="width">Width:</label>
		<input type="text" id="width-input" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="width-slider"/>
	</div>
	<div>
		<label for="padding">Padding:</label>
		<input type="text" id="padding-input" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="padding-slider"/>
	</div>
	<div>
		<label for="opacity">Opacity:</label>
		<input type="text" id="opacity-input" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="opacity-slider"/>
	</div>
	<div>
		<label for="fontsize">Font Size:</label>
		<input type="text" id="fontsize" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="fontsize-slider"/>
	</div>
	<div>
	  <label for="colorschemeSelection">Scheme:</label>
	  <select id="colorschemeSelection" class="combobox">
		<option value="1">Category10</option>
		<option value="2">Category20</option>
		<option value="3">Category20b</option>
		<option value="4">Category20c</option>
		<option value="YlGn">YlGn</option>
		<option value="YlGnBu">YlGnBu</option>
		<option value="GnBu">GnBu</option>
		<option value="BuGn">BuGn</option>
		<option value="PuBuGn">PuBuGn</option>
		<option value="PuBu">PuBu</option>
		<option value="BuPu">BuPu</option>
		<option value="RdPu">RdPu</option>
		<option value="PuRd">PuRd</option>
		<option value="OrRd">OrRd</option>
		<option value="YlOrRd">YlOrRd</option>
		<option value="YlOrBr">YlOrBr</option>
		<option value="Purples">Purples</option>
		<option value="Blues">Blues</option>
		<option value="Greens">Greens</option>
		<option value="Oranges">Oranges</option>
		<option value="Reds">Reds</option>
		<option value="Greys">Greys</option>
		<option value="PuOr">PuOr</option>
		<option value="BrBG">BrBG</option>
		<option value="PRGn">PRGn</option>
		<option value="PiYG">PiYG</option>
		<option value="RdBu">RdBu</option>
		<option value="RdGy">RdGy</option>
		<option value="RdYlBu">RdYlBu</option>
		<option value="Spectral">Spectral</option>
		<option value="RdYlGn">RdYlGn</option>
	  </select>
	</div>
	<div>
		<label for="charttitle">Title:</label>
		<input type="text" id="charttitle" size="20" style="border:2; color:#f6931f; font-weight:10;" onchange="titleChange(this.value)" />
	</div>
</div>
  </body>
</html>
