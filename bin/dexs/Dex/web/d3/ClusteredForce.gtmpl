<!DOCTYPE html>
<% import com.dexvis.util.DexUtil %>
<meta charset="utf-8">
<style>
<%
   println new File("javascript/jquery-ui/latest/jquery-ui.css").text
   println new File("javascript/jquery-ui/latest/jquery-ui.theme.css").text
%>
div.ui-tooltip {
    max-width: 600px;
}

circle {
  stroke: #fff;
}

</style>
<body>
<script type="text/javascript">
<%
println new File("javascript/d3/latest/d3.min.js").text
println new File("javascript/d3/latest/lib/colorbrewer/colorbrewer.js").text
println new File("javascript/jquery/latest/jquery.min.js").text
println new File("javascript/jquery-ui/latest/jquery-ui.min.js").text
println new File("javascript/touchpunch/latest/touchpunch.js").text

println new File("javascript/dex/dexutils.js").text
%>
</script>
<html>
  <head>
    <title>Clustered Force</title>
<style type="text/css">
<% println new File("web/d3/d3.css").text %>
</style>

<body>

<div id="chartTitle" class="ui-widget-content">
  <h1 id="titletext"></h1>
</div>
<div id="settings" style="visibility: hidden">
  <div id="chartHeight" value="800"></div>
  <div id="chartWidth" value="800"></div>
  <div id="minRadius" value="1"></div>
  <div id="maxRadius" value="10"></div>
  <div id="charge" value="0"></div>
  <div id="gravity" value="2"></div>
  <div id="topMargin" value="0"></div>
  <div id="bottomMargin" value="0"></div>
  <div id="leftMargin" value="0"></div>
  <div id="rightMargin" value="0"></div>
  <div id="scaleColumns" value="false"></div>
  <div id="padding" value="6"></div>
  <div id="titleTop" value="0"></div>
  <div id="titleLeft" value="0"></div>
  <div id="chartTop" value="0"></div>
  <div id="chartLeft" value="0"></div>
  <div id="chartConfigTop" value="200"></div>
  <div id="chartConfigLeft" value="600"></div>
  <div id="sizingMethod" value="linear"></div>
  <div id="colorScheme" value="1"></div>
</div>
<div id="chart" class="ui-widget-content"></div>

<script>

var width       = parseInt(d3.select("#chartWidth").attr("value"));
var height      = parseInt(d3.select("#chartHeight").attr("value"));
var minRadius = parseInt(d3.select("#minRadius").attr("value"));
var maxRadius = parseInt(d3.select("#maxRadius").attr("value"));
var charge    = parseInt(d3.select("#charge").attr("value"));
var gravity    = parseInt(d3.select("#gravity").attr("value"));
var topMargin  = parseInt(d3.select("#topMargin").attr("value"));
var bottomMargin = parseInt(d3.select("#bottomMargin").attr("value"));
var leftMargin  = parseInt(d3.select("#leftMargin").attr("value"));
var rightMargin = parseInt(d3.select("#rightMargin").attr("value"));
var padding = parseInt(d3.select("#padding").attr("value"));
var titleTop = d3.select("#titleTop").attr("value");
var titleTop = d3.select("#titleLeft").attr("value");
var chartTop = parseInt(d3.select("#chartTop").attr("value"));
var chartLeft = parseInt(d3.select("#chartLeft").attr("value"));
var chartConfigTop = parseInt(d3.select("#chartConfigTop").attr("value"));
var chartConfigLeft = parseInt(d3.select("#chartConfigLeft").attr("value"));
var sizingMethod = d3.select("#sizingMethod").attr("value");
var colorScheme  = d3.select("#colorScheme").attr("value");
var scaleColumns = d3.select("#scaleColumns").attr("value") == "true";

console.log("Scale Columns: " + scaleColumns);

\$("#chartTitle").position({ top : titleTop, left : titleLeft });
\$("#chart").position({ top : chartTop, left : chartLeft });
\$("#chartConfig").position({ top : chartConfigTop, left : chartConfigLeft });

<% println "var dex = " + DexUtil.getCsvString(dexData) %>

var numericHeaders = getNumericHeaders(dex);
var numericIndices = getNumericIndices(dex);
  
var chart;
var fill = getFill(colorScheme, numericHeaders.length);

function draw()
{
  chart = new ClusteredForce(width, height, minRadius, maxRadius, topMargin, bottomMargin,
                             leftMargin, rightMargin, sizingMethod, scaleColumns, padding, charge, gravity);
}

function update()
{
  chart.update(width, height, minRadius, maxRadius);
}

function ClusteredForce(width, height, minRadius, maxRadius, topMargin, bottomMargin, leftMargin, rightMargin, sizingMethod, scaleColumns, padding, charge, gravity)
{
  var i;

  //console.dir(getNumericIndices);

  var m = numericHeaders.length,
    radius = d3.scale.sqrt().range([0, 12]);
    //color = d3.scale.category10().domain(d3.range(numericHeaders.length));

  var n = (dex.length - 1) * numericHeaders.length;

  var minValue, maxValue;

  if (!scaleColumns)
  {
    minValue = getMin(dex, numericIndices[0]);
    maxValue = getMax(dex, numericIndices[0]);
    for (i=1; i<numericIndices.length; i++)
    {
      minValue = Math.min(minValue, getMin(dex, numericIndices[i]));
      maxValue = Math.max(maxValue, getMax(dex, numericIndices[i]));
    }
  }

  var nodes = [];

  this.scaleNodes = function(minRadius, maxRadius)
  {
    var numericScales = [];

    for (i=0; i<numericIndices.length; i++)
    {
      if (scaleColumns)
      {
        minValue = getMin(dex, numericIndices[i]);
        maxValue = getMax(dex, numericIndices[i]);
      }

      //console.log("I: " + i + ", MIN: " + minValue + ", MAX: " + maxValue);
  
      if (sizingMethod == "log")
      {
        //console.log("log");
        numericScales.push(d3.scale.log().domain([minValue, maxValue]).range([minRadius, maxRadius]));
      }
      else if (sizingMethod == "sqrt")
      {
        numericScales.push(d3.scale.sqrt().domain([minValue, maxValue]).range([minRadius, maxRadius]));
      }
      else if (sizingMethod == "pow")
      {
        numericScales.push(d3.scale.pow().domain([minValue, maxValue]).range([minRadius, maxRadius]));
      }
      else if (sizingMethod == "quantize")
      {
        numericScales.push(d3.scale.quantize().domain([minValue, maxValue]).range([minRadius, maxRadius]));
      }
      else if (sizingMethod == "quantile")
      {
        numericScales.push(d3.scale.quantile().domain([minValue, maxValue]).range([minRadius, maxRadius]));
      }
      else if (sizingMethod == "identity")
      {
        numericScales.push(d3.scale.identity().domain([minValue, maxValue]).range([minRadius, maxRadius]));
      }
      else if (sizingMethod == "threshold")
      {
        numericScales.push(d3.scale.threshold().domain([minValue, maxValue]).range([minRadius, maxRadius]));
      }
      else
      {
        numericScales.push(d3.scale.linear().domain([minValue, maxValue]).range([minRadius, maxRadius]));
      }
    }

    if (nodes.length == 0)
    {
      nodes = new Array((dex.length-1) * numericIndices.length);
    }

    for (var ri=1; ri<dex.length; ri++)
    {
      for (var ci=0; ci<numericIndices.length; ci++)
      {
        var label = "<table border='1'>";
        for (var hi=0; hi<dex[ri].length; hi++)
        {
          if (hi == numericIndices[ci])
          {
            label += "<tr><td><b>" + dex[0][hi] + "</b></td><td><b>" + dex[ri][hi] + "</b></td></tr>";
          }
          else
          {
            label += "<tr><td>" + dex[0][hi] + "</td><td>" + dex[ri][hi] + "</td></tr>";
          }
        }
        label += "</table>";
 
        nodes[(ri-1) * numericIndices.length + ci] =
        {
          radius: numericScales[ci](dex[ri][numericIndices[ci]]),
          //radius: radius(0.1),
          color: fill(ci),
          text: label
        };
      }
    }
  }

  this.scaleNodes(minRadius, maxRadius);

  force = d3.layout.force()
    .nodes(nodes)
    .size([width, height])
    .gravity(gravity/100.0)
    .charge(charge/100.0)
    .on("tick", tick)
    .start();

  d3.select("#chart").selectAll("svg").remove();

  var svg = d3.select("#chart").append("svg")
    .attr("width", width)
    .attr("height", height)
    .append("g")
    .attr("transform", "translate(" + leftMargin + "," + topMargin + ")");

  var circle = svg.selectAll("circle")
    .data(nodes)
    .enter().append("circle")
      .attr("r", function(d) { return (isNumber(d.radius) ? d.radius : 1); })
      .style("fill", function(d) { return d.color; })
      .attr("title", function(d) { return d.text; })
      .call(force.drag);

function tick(e) {
  circle
      .each(cluster(10 * e.alpha * e.alpha))
      .each(collide(.5))
      .attr("radius", function(d) { return (isNumber(d.radius) ? d.radius : 1); })
      .attr("cx", function(d) { return (isNumber(d.x) ? d.x : 0); })
      .attr("cy", function(d) { return (isNumber(d.y) ? d.y : 0); });
}

  this.setBackground = function(newColor)
  {
    d3.select("#chart").select("svg").style("background-color", newColor)
  }

// Not working yet, dummy replacement
this.update = function (width, height, minRadius, maxRadius)
{
  draw();
};

// Move d to be adjacent to the cluster node.
function cluster(alpha) {
  var max = {};

  // Find the largest node for each cluster.
  nodes.forEach(function(d) {
    if (!(d.color in max) || (d.radius > max[d.color].radius)) {
      max[d.color] = d;
    }
  });

  return function(d) {
    var node = max[d.color],
        l,
        r,
        x,
        y,
        i = -1;

    if (node == d) return;

    x = d.x - node.x;
    y = d.y - node.y;
    l = Math.sqrt(x * x + y * y);
    r = d.radius + node.radius;
    if (l != r) {
      l = (l - r) / l * alpha;
      d.x -= x *= l;
      d.y -= y *= l;
      node.x += x;
      node.y += y;
    }
  };
}

// Resolves collisions between d and all other circles.
function collide(alpha) {
  var quadtree = d3.geom.quadtree(nodes);
  return function(d) {
    var r = d.radius + radius.domain()[1] + padding,
        nx1 = d.x - r,
        nx2 = d.x + r,
        ny1 = d.y - r,
        ny2 = d.y + r;
    quadtree.visit(function(quad, x1, y1, x2, y2) {
      if (quad.point && (quad.point !== d)) {
        var x = d.x - quad.point.x,
            y = d.y - quad.point.y,
            l = Math.sqrt(x * x + y * y),
            r = d.radius + quad.point.radius + (d.color !== quad.point.color) * padding;
        if (l < r) {
          l = (l - r) / l * alpha;
          d.x -= x *= l;
          d.y -= y *= l;
          quad.point.x += x;
          quad.point.y += y;
        }
      }
      return x1 > nx2
          || x2 < nx1
          || y1 > ny2
          || y2 < ny1;
    });
  };
}
}

draw();

<%
   println """

\$(document).ready(
  function()
  {
  });

\$(function()
{
  \$(document).tooltip(
  {
    track : true
  });
});

function toggleConfig()
{
  if (\$("#chartConfig").css('visibility') == 'hidden')
  {
    show("#chartConfig");
  }
  else
  {
    hide("#chartConfig");
  }
}

function hide(elt)
{
  \$(elt).css("visibility", "hidden");
}

function show(elt)
{
  \$(elt).css("visibility", "visible");
}

  \$(function() {
  	\$( "#chartTitle" ).draggable().zIndex(3);
    \$( "#chartConfig" ).draggable().zIndex(2);
    \$( "#chart" ).draggable().zIndex(1);
  });

  \$(document).keypress(function(e)
  {
    if (e.altKey) {
      console.log("Alt Pressed");
      toggleConfig();
    }
  });

   \$("#chartTitle").draggable(
   {
    stop: function(event, ui) {
    	var pos = \$(this).position();
    	d3.select("#titleTop").attr("value", pos.top);
    	d3.select("#titleLeft").attr("value", pos.left);
    }
   });

   \$("#chart").draggable(
   {
    stop: function(event, ui) {

    	// Show dropped position.
    	var pos = \$(this).position();
    	d3.select("#chartTop").attr("value", pos.top);
    	d3.select("#chartLeft").attr("value", pos.left);
    }
   });

   \$("#chartConfig").draggable(
   {
    stop: function(event, ui) {
    	var pos = \$(this).position();
    	d3.select("#chartConfigTop").attr("value", pos.top);
    	d3.select("#chartConfigLeft").attr("value", pos.left);
    }
   });

   
  \$(function() {
     \$("#chartConfig").resizable();
  });
   
	\$(function() {
		\$( "#height-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: height,
		  slide : function(event, ui)
		  {
		    height = ui.value;
		    update();
	      \$("#height-input").val(height);
	      d3.select("#chartHeight").attr("value", height);
		  }
		});
		\$("#height-input").val(height);
		d3.select("#chartHeight").attr("value", height);
	});

    \$(function()
    {
      \$("#height-input").change(function ()
      {
          height = parseInt(this.value);
          update();
          d3.select("#chartHeight").attr("value", height);
          \$("#height-slider").slider("value", height);
      });
    });

	\$(function() {
		\$( "#width-slider" ).slider(
		{
	    min: 100,
		  max: 2000,
		  value: width,
		  slide : function(event, ui)
		  {
		    width = ui.value;
		    update();
	      \$("#width-input").val(width);
	      d3.select("#chartWidth").attr("value", width);
		  }
		});
		\$("#width-input").val(width);
		d3.select("#chartWidth").attr(width);
	});

  \$(function()
  {
    \$("#width-input").change(function ()
    {
      width = parseInt(this.value);
      update();
      d3.select("#chartWidth").attr("value", width);
      \$("#width-slider").slider("value", width);
    });
  });

	\$(function()
	{
		\$( "#minradius-slider" ).slider(
		{
	    min: 1,
		  max: 50,
		  value: minRadius,
		  slide : function(event, ui)
		  {
		    minRadius = ui.value;
        update();
        \$("#minradius-input").val(minRadius);
	      d3.select("#minRadius").attr("value", minRadius);
		  }
		});
		\$("#minradius-input").val(minRadius);
		d3.select("#minRadius").attr("value", minRadius);
	});

  \$(function()
  {
    \$("#minradius-input").change(function ()
    {
      minRadius = parseInt(this.value);
      update();
      d3.select("#minRadius").attr("value", minRadius);
      \$("#minradius-slider").slider("value", minRadius);
    });
  });

	\$(function()
	{
		\$( "#maxradius-slider" ).slider(
		{
	    min: 1,
		  max: 200,
		  value: maxRadius,
		  slide : function(event, ui)
		  {
		    maxRadius = ui.value;
	      update();
        \$("#maxradius-input").val(maxRadius);
	      d3.select("#maxRadius").attr("value", maxRadius);
		  }
		});
		\$("#maxradius-input").val(maxRadius);
		d3.select("#maxRadius").attr("value", maxRadius);
	});

  \$(function()
  {
    \$("#maxradius-input").change(function ()
    {
      maxRadius = parseInt(this.value);
      update();
      d3.select("#maxRadius").attr("value", maxRadius);
      \$("#maxradius-slider").slider("value", maxRadius);
    });
  });

	\$(function() {
		\$( "#charge-slider" ).slider(
		{
      min: -1000,
		  max: 1000,
		  value: charge,
		  slide : function(event, ui)
		  {
		    charge = ui.value;
		    draw();
		    d3.select("#charge").attr("value", charge);
	      \$("#charge-input").val(charge);
		  }
		});
		\$("#charge-input").val(charge);
		d3.select("#charge").attr("value", charge);
	});

  \$(function()
  {
    \$("#charge-input").change(function ()
    {
      charge = parseInt(this.value);
      draw();
      d3.select("#charge").attr("value", charge);
      \$("#charge-slider").slider("value", charge);
    });
  });

	\$(function() {
		\$( "#gravity-slider" ).slider(
		{
      min: 0,
		  max: 100,
		  value: gravity,
		  slide : function(event, ui)
		  {
		    gravity = ui.value;
		    draw();
		    d3.select("#gravity").attr("value", gravity);
	      \$("#gravity-input").val(gravity);
		  }
		});
		\$("#gravity-input").val(gravity);
		d3.select("#gravity").attr("value", gravity);
	});

  \$(function()
  {
    \$("#gravity-input").change(function ()
    {
      gravity = parseInt(this.value);
      draw();
      d3.select("#gravity").attr("value", gravity);
      \$("#gravity-slider").slider("value", gravity);
    });
  });

	\$(function() {
		\$( "#topmargin-slider" ).slider(
		{
	    min: 0,
		  max: 100,
		  value: topMargin,
		  slide : function(event, ui)
		  {
		    topMargin = ui.value;
		    draw();
		    d3.select("#topMargin").attr("value", topMargin);
	        \$("#topmargin-input").val(topMargin);
		  }
		});
		\$("#topmargin-input").val(topMargin);
		d3.select("#topMargin").attr("value", topMargin);
	});

    \$(function()
    {
      \$("#topmargin-input").change(function ()
      {
          topMargin = parseInt(this.value);
          draw();
          d3.select("#topMargin").attr("value", topMargin);
          \$("#topmargin-slider").slider("value", topMargin);
      });
    });

	\$(function() {
		\$( "#bottommargin-slider" ).slider(
		{
	      min: 0,
		  max: 100,
		  value: bottomMargin,
		  slide : function(event, ui)
		  {
		    bottomMargin = ui.value;
	        draw();
	        \$("#bottommargin-input").val(bottomMargin);
	        d3.select("#bottomMargin").attr("value", bottomMargin);
		  }
		});
		\$("#bottommargin-input").val(bottomMargin);
		d3.select("#bottomMargin").attr("value", bottomMargin);
	});

    \$(function()
    {
      \$("#bottommargin-input").change(function ()
      {
          bottomMargin = parseInt(this.value);
          draw();
          d3.select("#bottomMargin").attr("value", bottomMargin);
          \$("#bottommargin-slider").slider("value", bottomMargin);
      });
    });

	\$(function() {
		\$( "#leftmargin-slider" ).slider(
		{
	    min: 0,
		  max: 100,
		  value: leftMargin,
		  slide : function(event, ui)
		  {
		    leftMargin = ui.value;
		    draw();
		    d3.select("#leftMargin").attr("value", leftMargin);
	        \$("#leftmargin-input").val(leftMargin);
		  }
		});
		\$("#leftmargin-input").val(leftMargin);
		d3.select("#leftMargin").attr("value", leftMargin);
	});

    \$(function()
    {
      \$("#leftmargin-input").change(function ()
      {
          leftMargin = parseInt(this.value);
          draw();
          d3.select("#leftMargin").attr("value", leftMargin);
          \$("#leftmargin-slider").slider("value", leftMargin);
      });
    });

	\$(function() {
		\$( "#rightmargin-slider" ).slider(
		{
	      min: 0,
		  max: 100,
		  value: rightMargin,
		  slide : function(event, ui)
		  {
		    rightMargin = ui.value;
	        draw();
	        \$("#rightmargin-input").val(rightMargin);
	        d3.select("#rightMargin").attr("value", rightMargin);
		  }
		});
		\$("#rightmargin-input").val(rightMargin);
		d3.select("#rightMargin").attr("value", rightMargin);
	});

    \$(function()
    {
      \$("#rightmargin-input").change(function ()
      {
          rightMargin = parseInt(this.value);
          draw();
          d3.select("#rightMargin").attr("value", rightMargin);
          \$("#rightmargin-slider").slider("value", rightMargin);
      });
    });

	\$(function() {
		\$( "#padding-slider" ).slider(
		{
	    min: 0,
		  max: 50,
		  value: padding,
		  slide : function(event, ui)
		  {
		    padding = ui.value;
	        draw();
	        \$("#padding-input").val(padding);
	        d3.select("#padding").attr("value", padding);
		  }
		});
		\$("#padding-input").val(padding);
		d3.select("#padding").attr("value", padding);
	});

  \$(function()
  {
    \$("#padding-input").change(function ()
    {
      padding = parseInt(this.value);
      draw();
      d3.select("#padding").attr("value", padding);
      \$("#padding-slider").slider("value", padding);
    });
  });

  \$(function()
  {
    \$("#colorschemeSelection").change(function ()
    {
      colorScheme = this.value;
      fill = getFill(colorScheme, numericHeaders.length);
      draw();
      d3.select("#colorScheme").attr("value", colorScheme);
    });
  });

function titleChange(newTitle)
{
  document.title = newTitle;
  document.getElementById("titletext").innerHTML = newTitle;
}

function bgColorChange(newColor)
{
  chart.setBackground(newColor);
}

function scaleColumnsChange(newScaleColumns)
{
  console.log("Setting scaleColumns to: " + newScaleColumns);
  scaleColumns = newScaleColumns;
  d3.select("#scaleColumns").attr("value", scaleColumns);
  draw();
}

\$(function()
{
  \$("#sizingMethodSelection").change(function ()
  {
    sizingMethod = this.value;
    draw();
    d3.select("#sizingMethod").attr("value", sizingMethod);
  });
});
"""
%>
</script>

  <div id="chartConfig" class="ui-widget-content">
    <table>
    <h1 title="<b>Options:</b><br><br>This menu can be disabled or enabled via ALT-c.">Options</h1>
	<div>
		<label for="height" title="<b>Height:</b><br><br>This will control the overall height of the SVG in pixels.">Height:</label>
		<input type="text" id="height-input" size="5" />
		<div id="height-slider"/>
	</div>
	<div>
		<label for="width" title="<b>Width:</b><br><br>This will control overall width of the SVG in pixels.">Width:</label>
		<input type="text" id="width-input" size="5" />
		<div id="width-slider"/>
	</div>
	<div>
		<label for="minradius"
		title="<b>Minimum Radius:</b><br><br>This will control the smallest size in pixels of a clustered circle.">Minimum Radius:</label>
		<input type="text" id="minradius-input" size="5" />
		<div id="minradius-slider"/>
	</div>
	<div>
		<label for="maxradius"
		title="<div><b>Maximum Radius:</b><br><br></div><div>This controls the largest size (in pixels) of a clustered circle.</div>">Maximum Radius:</label>
		<input type="text" id="maxradius-input" size="5" />
		<div id="maxradius-slider"/>
	</div>
	<div>
		<label for="charge" title="<div><b>Charge:</b><br><br></div><div>This controls charge between particles.  Negative repels, positive attracts.  Magnitude determines the strength of this force.</div>">Charge:</label>
		<input type="text" id="charge-input" size="5"/>
		<div id="charge-slider"/>
	</div>
	<div>
		<label for="gravity" title="<div><b>Font Size:</b><br><br></div><div>This controls gravitational pull of each cluster.</div>">Gravity:</label>
		<input type="text" id="gravity-input" size="5"/>
		<div id="gravity-slider"/>
	</div>
	<div>
		<label for="topmargin"
		title="<div><b>Top Margin:</b><br><br></div><div>If the image is cut off at the top, you might need more top margin.  Either that, or more SVG height.</div>">Top Margin:</label>
		<input type="text" id="topmargin-input" size="5" />
		<div id="topmargin-slider"/>
	</div>
  <div>
	  <label for="bottommargin" 	  title="<div><b>Bottom Margin:</b><br><br></div><div>If the image is cut off at the bottom, you might need more bottom margin.  Or maybe more height on the SVG.</div>">Bottom Margin:</label>
	  <input type="text" id="bottommargin-input" size="5"/>
	  <div id="bottommargin-slider"/>
  </div>
	<div>
		<label for="leftmargin"
		title="<div><b>Top Margin:</b><br><br></div><div>If the image is cut off at the left, you might need more left margin.  Either that, or more SVG height.</div>">Left Margin:</label>
		<input type="text" id="leftmargin-input" size="5" />
		<div id="leftmargin-slider"/>
	</div>
  <div>
	  <label for="rightmargin" 	  title="<div><b>Bottom Margin:</b><br><br></div><div>If the image is cut off at the right, you might need more right margin.  Or maybe more height on the SVG.</div>">Right Margin:</label>
	  <input type="text" id="rightmargin-input" size="5"/>
	  <div id="rightmargin-slider"/>
  </div>
  <div>
	    <label for="padding" title="<div><b>Padding:</b><br><br></div><div>Enter the width of the stroke lines for each segment.</div>">Padding:</label>
	    <input type="text" id="padding-input" size="5" />
	    <div id="padding-slider"/>
  </div>
    <div>
	    <label for="scaleColumns" title="<div><b>Scale Columns:</b><br><br></div><div>When selected, each numeric column will be scaled relative to the values within that column.  Otherwise, it will be scaled to the range of all of the numeric columns.</div>">Scale Columns:</label>
	    <input type="checkbox" id="scalecolumns" onchange="scaleColumnsChange(this.checked)" />
	    <div id="scalecolumns-slider"/>
    </div>
	<div>
  <div>
    <label for="sizingMethodSelection"
     title="<b>Sizing:</b><br><br>This will specify how the numerical values are sized.<br><br><table><tr><td>Linear</td><td>Use a straight linear coloring model.</td></tr><tr><td>Logarithmic</td><td>Use a logarithmic function to assign colors.</td></tr><tr><td>Square Root</td><td>Use the square root of the numbers when assigning color values.</td></tr><tr><td>Exponential</td><td>Uses d3.pow() for scaling.</td></tr><tr><td>Quantize</td><td>This scale accepts more than 2 colors.  Colors are assigned based on the quantized deciles of the range.</td></tr><tr><td>Quantile</td><td>This one also accepts multiple colors and also maps the input domain into a discrete range.</td></tr><tr><td>Threshold</td><td>Similar to quantize scales, except it allows mapping of domain subsets to discrete values.</td></tr><tr><td>Identity</td><td>A special case of linear scale where the domain and range are identical.</td></tr></table>">Sizing:</label>
	  <select id="sizingMethodSelection" class="combobox">
	    <option value="linear">Linear</option>
	    <option value="log">Logarithmic</option>
	    <option value="sqrt">Square Root</option>
	    <option value="pow">Power</option>
	    <option value="quantize">Quantize</option>
	    <option value="quantile">Quantile</option>
	    <option value="identity">Identity</option>
	    <option value="threshold">Threshold</option>
	  </select>
	</div>
		<div>
	  <label for="colorschemeSelection">Scheme:</label>
	  <select id="colorschemeSelection" class="combobox">
	    <option value="1">Category10</option>
    	<option value="2">Category20</option>
    	<option value="3">Category20b</option>
    	<option value="4">Category20c</option>
    	<option value="YlGn">YlGn</option>
    	<option value="YlGnBu">YlGnBu</option>
    	<option value="GnBu">GnBu</option>
    	<option value="BuGn">BuGn</option>
	    <option value="PuBuGn">PuBuGn</option>
	    <option value="PuBu">PuBu</option>
	    <option value="BuPu">BuPu</option>
	    <option value="RdPu">RdPu</option>
	    <option value="PuRd">PuRd</option>
	    <option value="OrRd">OrRd</option>
	    <option value="YlOrRd">YlOrRd</option>
    	<option value="YlOrBr">YlOrBr</option>
    	<option value="Purples">Purples</option>
    	<option value="Blues">Blues</option>
	    <option value="Greens">Greens</option>
	    <option value="Oranges">Oranges</option>
	    <option value="Reds">Reds</option>
	    <option value="Greys">Greys</option>
	    <option value="PuOr">PuOr</option>
	    <option value="BrBG">BrBG</option>
	    <option value="PRGn">PRGn</option>
	    <option value="PiYG">PiYG</option>
	    <option value="RdBu">RdBu</option>
	    <option value="RdGy">RdGy</option>
	    <option value="RdYlBu">RdYlBu</option>
	    <option value="Spectral">Spectral</option>
	    <option value="RdYlGn">RdYlGn</option>
	    <option value="HiContrast">HiContrast</option>
	    <option value="SoftSep4WhiteBG">SoftSep4WhiteBG</option>
	    <option value="HardSep4WhiteBG">HardSep4WhiteBG</option>
	  </select>
	</div>
	<div>
	<label for="bgcolor">Background Color:</label>
	  <input type="text" id="bgcolor" size="20" onchange="bgColorChange(this.value)" />
  </div>
	<div>
		<label for="charttitle">Title:</label>
		<input type="text" id="charttitle" onchange="titleChange(this.value)" />
	</div>
  </div>
</body>
</html>
