<!DOCTYPE html>
<% import com.dexvis.util.DexUtil %>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <title>Co-Occurrence</title>

<script type="text/javascript">
<% println new File("javascript/d3/latest/d3.min.js").text %>
</script>

<style>
<%
   println new File("javascript/jquery-ui/latest/jquery-ui.css").text
   println new File("javascript/jquery-ui/latest/jquery-ui.theme.css").text
   println new File("web/d3/d3.css").text
 %>
</style>

<script>
<%
println new File("javascript/jquery/latest/jquery.min.js").text
println new File("javascript/jquery-ui/latest/jquery-ui.min.js").text
%>
</script>

<style type="text/css">
#chart.ui-widget-content {
    background-color:#ffffff;
    background-image:none;
    border:none;
}

#draggable-title.ui-widget-content {
  foreground-color:#cccccc;
  background-color:#ffffff;
  background-image:none;
  border:none;
}

.background {
  fill: #eee;
}

line {
  stroke: #fff;
}

text.active {
  fill: red;
}
</style>

</head>
<body>
<div id="draggable-title" class="ui-widget-content">
  <h1 id="titletext">Co-Occurrence</h1>
</div>

<div id="chart"></div>

<script type="text/javascript">

<%
    def src
    def dest
    def nodes = []
    def nodeMap = [:]
    def links = [:]
    def weight
    def nodeNum = 0;
    header.each { h -> nodeMap[h] = [:]; links[h] = [:]; }
    dexData.getData().eachWithIndex
    {
      row, ri ->
      (0..(row.size()-2)).each
      {
        ci ->
        src = row[ci]
        dest = row[ci+1]
        
        if (!nodeMap[header[ci]][src])
        {
          nodeMap[header[ci]][src] = nodeNum++
          nodes << src
        }
        if (!nodeMap[header[ci+1]][dest])
        {
          nodeMap[header[ci+1]][dest] = nodeNum++
          nodes << dest
        }

        if (links[header[ci]]["$src->$dest"])
        {
          weight = links[header[ci]]["$src->$dest"]["weight"]
        }
        else
        {
          weight = 1
        }
        links[header[ci]]["$src->$dest"] =
          [ "source" : nodeMap[header[ci]][src], "dest" : nodeMap[header[ci+1]][dest], "value" : weight ]
      }
    }

    def nodeStr = nodes.collect { "{ \"name\" : \"$it\" }" }.join(",");
    def elts = []
    links.each
    {
      h, lmap ->
      //println "// LMAP: $lmap"
      lmap.each
      {
        con, conMap ->
        //println "//CONMAP: $conMap"
        elts << """{ "source":"${conMap["source"]}","target":"${conMap["dest"]}","value":"${conMap["value"]}"}"""
      }
    }

    println "var jsonData = { \"nodes\":[ $nodeStr ], \"links\" : [ ${elts.join(",")} ] };"
 %>

readJson = function(text, callback)
{
  callback(text ? JSON.parse(text) : null);
}

var width = 900;
var height = 900;
var fontSize = 12;
var topMargin = 150;
var bottomMargin = 0;
var leftMargin = 200;
var rightMargin = 0;

function draw()
{
  d3.select("#chart").html("");
  drawCoOccurrence(width, height, fontSize,topMargin, bottomMargin, leftMargin, rightMargin);
}

function drawCoOccurrence(width, height, fontSize, topMargin, bottomMargin, leftMargin, rightMargin)
{
  //var margin = {top: topMargin, right: rightMargin, bottom: bottomMargin, left: leftMargin};

  var x = d3.scale.ordinal().rangeBands([0, width]),
      z = d3.scale.linear().domain([0, 4]).clamp(true),
      c = d3.scale.category10().domain(d3.range(10));

var svg = d3.select("#chart").append("svg")
    .attr("width", width)
    .attr("height", height)
  .append("g")
    .attr("transform", "translate(" + leftMargin + "," + topMargin + ")");

readJson(JSON.stringify(jsonData), function(json) {
  var matrix = [],
      nodes = json.nodes,
      n = nodes.length;

  // Compute index per node.
  nodes.forEach(function(node, i) {
    node.index = i;
    node.count = 0;
    matrix[i] = d3.range(n).map(function(j) { return {x: j, y: i, z: 0}; });
  });

  // Convert links to matrix; count character occurrences.
  json.links.forEach(function(link) {
    matrix[link.source][link.target].z += link.value;
    matrix[link.target][link.source].z += link.value;
    matrix[link.source][link.source].z += link.value;
    matrix[link.target][link.target].z += link.value;
    nodes[link.source].count += link.value;
    nodes[link.target].count += link.value;
  });

  // Precompute the orders.
  var orders = {
    name: d3.range(n).sort(function(a, b) { return d3.ascending(nodes[a].name, nodes[b].name); }),
    count: d3.range(n).sort(function(a, b) { return nodes[b].count - nodes[a].count; }),
    group: d3.range(n).sort(function(a, b) { return nodes[b].group - nodes[a].group; })
  };

  // The default sort order.
  x.domain(orders.name);

  svg.append("rect")
      .attr("class", "background")
      .attr("width", width)
      .attr("height", height);

  var row = svg.selectAll(".row")
      .data(matrix)
    .enter().append("g")
      .attr("class", "row")
      .attr("transform", function(d, i) { return "translate(0," + x(i) + ")"; })
      .each(row);

  row.append("line")
      .attr("x2", width);

  row.append("text")
      .attr("x", -6)
      .attr("y", x.rangeBand() / 2)
      .attr("dy", ".32em")
      .attr("text-anchor", "end")
      .attr("font-size", fontSize)
      .text(function(d, i) { return nodes[i].name; });

  var column = svg.selectAll(".column")
      .data(matrix)
    .enter().append("g")
      .attr("class", "column")
      .attr("transform", function(d, i) { return "translate(" + x(i) + ")rotate(-90)"; });

  column.append("line")
      .attr("x1", -width);

  column.append("text")
      .attr("x", 6)
      .attr("y", x.rangeBand() / 2)
      .attr("dy", ".32em")
      .attr("text-anchor", "start")
      .attr("font-size", fontSize)
      .text(function(d, i) { return nodes[i].name; });

  function row(row) {
    var cell = d3.select(this).selectAll(".cell")
        .data(row.filter(function(d) { return d.z; }))
      .enter().append("rect")
        .attr("class", "cell")
        .attr("x", function(d) { return x(d.x); })
        .attr("width", x.rangeBand())
        .attr("height", x.rangeBand())
        .style("fill-opacity", function(d) { return z(d.z); })
        .style("fill", function(d) { return nodes[d.x].group == nodes[d.y].group ? c(nodes[d.x].group) : null; })
        .on("mouseover", mouseover)
        .on("mouseout", mouseout);
  }

  function mouseover(p) {
    d3.selectAll(".row text").classed("active", function(d, i) { return i == p.y; });
    d3.selectAll(".column text").classed("active", function(d, i) { return i == p.x; });
  }

  function mouseout() {
    d3.selectAll("text").classed("active", false);
  }

  d3.select("#order").on("change", function() {
    clearTimeout(timeout);
    order(this.value);
  });

  function order(value) {
    x.domain(orders[value]);

    var t = svg.transition().duration(1000);

    t.selectAll(".row")
        .delay(function(d, i) { return x(i) * 4; })
        .attr("transform", function(d, i) { return "translate(0," + x(i) + ")"; })
      .selectAll(".cell")
        .delay(function(d) { return x(d.x) * 4; })
        .attr("x", function(d) { return x(d.x); });

    t.selectAll(".column")
        .delay(function(d, i) { return x(i) * 4; })
        .attr("transform", function(d, i) { return "translate(" + x(i) + ")rotate(-90)"; });
  }

  var timeout = setTimeout(function() {
    order("group");
    d3.select("#order").property("selectedIndex", 2).node().focus();
  }, 1000);
});
}

draw();

<%
   println """
	\$(function() {
		\$( "#height-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: height,
		  slide : function(event, ui)
		  {
		    height = ui.value;
		    draw();
	        \$("#height").val(\$("#height-slider").slider("value"));
		  }
		});
		\$("#height").val(\$("#height-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#width-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: width,
		  slide : function(event, ui)
		  {
		    width = ui.value;
		    draw();
	        \$("#width").val(\$("#width-slider").slider("value"));
		  }
		});
		\$("#width").val(\$("#width-slider").slider("value"));
	});
"""
   println """
	\$(function() {
		\$( "#topmargin-slider" ).slider(
		{
	      min: 0,
		  max: 500,
		  value: topMargin,
		  slide : function(event, ui)
		  {
		    topMargin = ui.value;
		    draw();
	        \$("#topmargin").val(\$("#topmargin-slider").slider("value"));
		  }
		});
		\$("#topmargin").val(\$("#topmargin-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#bottommargin-slider" ).slider(
		{
	      min: 0,
		  max: 500,
		  value: bottomMargin,
		  slide : function(event, ui)
		  {
		    bottomMargin = ui.value;
		    draw();
	        \$("#bottommargin").val(\$("#bottommargin-slider").slider("value"));
		  }
		});
		\$("#bottommargin").val(\$("#bottommargin-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#leftmargin-slider" ).slider(
		{
	      min: 0,
		  max: 500,
		  value: leftMargin,
		  slide : function(event, ui)
		  {
		    leftMargin = ui.value;
		    draw();
	        \$("#leftmargin").val(\$("#leftmargin-slider").slider("value"));
		  }
		});
		\$("#leftmargin").val(\$("#leftmargin-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#rightmargin-slider" ).slider(
		{
	      min: 0,
		  max: 500,
		  value: rightMargin,
		  slide : function(event, ui)
		  {
		    rightMargin = ui.value;
		    draw();
	        \$("#rightmargin").val(\$("#rightmargin-slider").slider("value"));
		  }
		});
		\$("#rightmargin").val(\$("#rightmargin-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#fontsize-slider" ).slider(
		{
	      min: 1,
		  max: 48,
		  value: fontSize,
		  slide : function(event, ui)
		  {
		    fontSize = ui.value;
		    draw();
	        \$("#fontsize").val(\$("#fontsize-slider").slider("value"));
		  }
		});
		\$("#fontsize").val(\$("#fontsize-slider").slider("value"));
	});
"""

   println """
    \$(function() {
    	\$( "#draggable-title" ).draggable();
        \$( "#config" ).draggable();
        \$( "#chart" ).draggable();
    });
    
function titleChange(newTitle)
{
  d3.select("title").text(newTitle);
  d3.select("#titletext").text(newTitle);
}

"""
%>
</script>
    
<div id="chartConfig" class="demo">
    <h1>Configuration</h1>
	<div>
		<label for="height">Height:</label>
		<input type="text" id="height" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="height-slider"/>
	</div>
	<div>
		<label for="width">Width:</label>
		<input type="text" id="width" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="width-slider"/>
	</div>
	<div>
		<label for="topmargin">Top Margin:</label>
		<input type="text" id="topmargin" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="topmargin-slider"/>
	</div>
	<div>
		<label for="bottommargin">Bottom Margin:</label>
		<input type="text" id="bottommargin" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="bottommargin-slider"/>
	</div>
	<div>
		<label for="leftmargin">Left Margin:</label>
		<input type="text" id="leftmargin" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="leftmargin-slider"/>
	</div>
	<div>
		<label for="rightmargin">Right Margin:</label>
		<input type="text" id="rightmargin" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="rightmargin-slider"/>
	</div>
	<div>
		<label for="fontsize">Font Size:</label>
		<input type="text" id="fontsize" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="fontsize-slider"/>
	</div>
	<div>
		<label for="charttitle">Title:</label>
		<input type="text" id="charttitle" size="20" style="border:2; color:#f6931f; font-weight:10;" onchange="titleChange(this.value)" />
	</div>
</div>
  </body>
</html>
