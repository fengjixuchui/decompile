<!DOCTYPE html>
<% import com.dexvis.util.DexUtil %>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <title>Indented Tree</title>
<script type="text/javascript">
<%
println new File("javascript/d3/latest/d3.min.js").text
println new File("javascript/d3/latest/lib/colorbrewer/colorbrewer.js").text
%>
</script>

<style>
<%
  println new File("javascript/jquery-ui/latest/jquery-ui.min.css").text
  println new File("javascript/jquery-ui/latest/jquery-ui.theme.min.css").text
  println new File("web/d3/d3.css").text
%>

</style>

<script>

<%
  println new File("javascript/jquery/latest/jquery.min.js").text
  println new File("javascript/jquery-ui/latest/jquery-ui.min.js").text
%>

</script>

<style type="text/css">

circle.node {
  cursor: pointer;
  stroke: #000;
  stroke-width: .5px;
}

.node rect {
  cursor: pointer;
  fill: #fff;
  fill-opacity: .5;
  stroke: #3182bd;
  stroke-width: 1.5px;
}

.node text {
  font: 10px sans-serif;
  pointer-events: none;
}

path.link {
  fill: none;
  stroke: #9ecae1;
  stroke-width: 1.5px;
}
</style>
  </head>
  <body>
  <div id="chartTitle" class="ui-widget-content">
  <h1 id="titletext">Indented Tree</h1>
</div>

<div id="chart"></div>

<script type="text/javascript">
<%
  println DexUtil.getJSONString(dexData);
%>

readJson = function(text, callback)
{
  callback(text ? JSON.parse(text) : null);
}

var width = 960,
    height = 800,
    i = 0,
    barHeight = 20,
    barWidth = 600,
    duration = 400,
    fontSize = 8;
var tree;
var root;

function draw()
{
  drawIndentedTree(width, height, i, barHeight, barWidth, duration, fontSize);
}

function drawIndentedTree(width, height, i, barHeight, barWidth, duration, fontSize)
{
  var w = width,
      h = height;

  tree = d3.layout.tree()
      .size([h, 100]);

  var diagonal = d3.svg.diagonal()
      .projection(function(d) { return [d.y, d.x]; });

  var vis = d3.select("#chart").append("svg:svg")
      .attr("width", w)
      .attr("height", h)
      .append("svg:g")
      .attr("transform", "translate(20,30)");

  readJson(JSON.stringify(jsonData), function(json) {
    json.x0 = 0;
    json.y0 = 0;
    root = json;
    update(root = json);
  });

  function update(source)
  {
    // Compute the flattened node list. TODO use d3.layout.hierarchy.
    var nodes = tree.nodes(root);

    // Compute the "layout".
    nodes.forEach(function(n, i)
    {
      n.x = i * barHeight;
    });
  
    // Update the nodes…
    var node = vis.selectAll("g.node")
        .data(nodes, function(d) { return d.id || (d.id = ++i); });
  
    var nodeEnter = node.enter().append("svg:g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
        .style("opacity", 1e-6);

    // Enter any new nodes at the parent's previous position.
    nodeEnter.append("svg:rect")
        .attr("y", -barHeight / 2)
        .attr("height", barHeight)
        .attr("width", barWidth)
        .style("fill", color)
        .on("click", click);
  
    nodeEnter.append("svg:text")
        .attr("dy", 3.5)
        .attr("dx", 5.5)
        .attr("font-size", fontSize) // Not working...
        .text(function(d) { return d.name; });

    // Transition nodes to their new position.
    nodeEnter.transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
        .style("opacity", 1);
  
    node.transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
        .style("opacity", 1)
        .select("rect")
        .style("fill", color);
  
    // Transition exiting nodes to the parent's new position.
    node.exit().transition()
        .duration(duration)
        .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
        .style("opacity", 1e-6)
        .remove();
  
    // Update the links…
    var link = vis.selectAll("path.link")
        .data(tree.links(nodes), function(d) { return d.target.id; });

    // Enter any new links at the parent's previous position.
    link.enter().insert("svg:path", "g")
        .attr("class", "link")
        .attr("d", function(d)
        {
          var o = {x: source.x0, y: source.y0};
          return diagonal({source: o, target: o});
        })
      .transition()
        .duration(duration)
        .attr("d", diagonal);
  
    // Transition links to their new position.
    link.transition()
        .duration(duration)
        .attr("d", diagonal);
  
    // Transition exiting nodes to the parent's new position.
    link.exit().transition()
        .duration(duration)
        .attr("d", function(d)
        {
          var o = {x: source.x, y: source.y};
          return diagonal({source: o, target: o});
        })
        .remove();
  
    // Stash the old positions for transition.
    nodes.forEach(function(d)
    {
      d.x0 = d.x;
      d.y0 = d.y;
    });
  }

  // Toggle children on click.
  function click(d)
  {
    if (d.children)
    {
      d._children = d.children;
      d.children = null;
    }
    else
    {
      d.children = d._children;
      d._children = null;
    }
    update(d);
  }

  function color(d)
  {
    return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#fd8d3c";
  }
}

draw();

<%
   println """
	\$(function() {
		\$( "#height-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: height,
		  slide : function(event, ui)
		  {
		    d3.select("#chart").html("");
		    height = ui.value;
		    draw();
	        \$("#height").val(\$("#height-slider").slider("value"));
		  }
		});
		\$("#height").val(\$("#height-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#width-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: width,
		  slide : function(event, ui)
		  {
		    d3.select("#chart").html("");
		    width = ui.value;
		    draw();
	        \$("#width").val(\$("#width-slider").slider("value"));
		  }
		});
		\$("#width").val(\$("#width-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#barheight-slider" ).slider(
		{
	      min: 1,
		  max: 100,
		  value: barHeight,
		  slide : function(event, ui)
		  {
		    d3.select("#chart").html("");
		    barHeight = ui.value;
		    //d3.selectAll("rect").attr("height", barHeight);    
		    draw();
		    //tree.nodes();
	        \$("#barheight").val(\$("#barheight-slider").slider("value"));
		  }
		});
		\$("#barheight").val(\$("#barheight-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#barwidth-slider" ).slider(
		{
	      min: 1,
		  max: 2000,
		  value: barWidth,
		  slide : function(event, ui)
		  {
		    d3.select("#chart").html("");
		    barWidth = ui.value;
		    draw();
	        \$("#barwidth").val(\$("#barwidth-slider").slider("value"));
		  }
		});
		\$("#barwidth").val(\$("#barwidth-slider").slider("value"));
	});
"""
   println """
	\$(function() {
		\$( "#fontsize-slider" ).slider(
		{
	      min: 1,
		  max: 48,
		  value: fontSize,
		  slide : function(event, ui)
		  {
		    d3.select("#chart").html("");
		    fontSize = ui.value;
		    draw();
	        \$("#fontsize").val(\$("#fontsize-slider").slider("value"));
		  }
		});
		\$("#fontsize").val(\$("#fontsize-slider").slider("value"));
	});
"""

   println """
    \$(function() {
    	\$( "#chartTitle" ).draggable();
        \$( "#chartConfig" ).draggable();
        \$( "#chart" ).draggable();
    });
    
function titleChange(newTitle)
{
  d3.select("title").text(newTitle);
  d3.select("#titletext").text(newTitle);
}

"""
%>
</script>
    
<div id="chartConfig" class="demo">
    <h1>Configuration</h1>
	<div>
		<label for="height">Height:</label>
		<input type="text" id="height" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="height-slider"/>
	</div>
	<div>
		<label for="width">Width:</label>
		<input type="text" id="width" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="width-slider"/>
	</div>
	<div>
		<label for="height">Bar Height:</label>
		<input type="text" id="barheight" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="barheight-slider"/>
	</div>
	<div>
		<label for="width">Bar Width:</label>
		<input type="text" id="barwidth" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="barwidth-slider"/>
	</div>
	<div>
		<label for="fontsize">Font Size:</label>
		<input type="text" id="fontsize" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="fontsize-slider"/>
	</div>
	<div>
		<label for="charttitle">Title:</label>
		<input type="text" id="charttitle" size="20" style="border:2; color:#f6931f; font-weight:10;" onchange="titleChange(this.value)" />
	</div>
</div>
  </body>
</html>
