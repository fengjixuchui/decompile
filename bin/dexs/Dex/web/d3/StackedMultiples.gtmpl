<!DOCTYPE html>
<% import com.dexvis.util.DexUtil %>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <title>Bin Chart</title>

<script type="text/javascript">
<%
println new File("javascript/d3/3.0.2/d3.min.js").text
println new File("javascript/d3/3.0.2/lib/colorbrewer/colorbrewer.js").text
%>
</script>

<style>
<% println new File("javascript/jquery/1.9.1/css/ui-lightness/jquery-ui-1.9.1.custom.css").text %>
<% println new File("web/d3/d3.css").text %>
</style>

<script>
<%
println new File("javascript/jquery/1.9.1/js/jquery-1.8.2.js").text
println new File("javascript/jquery/1.9.1/js/jquery-ui-1.9.1.custom.min.js").text
println new File("javascript/dex/dexutils.js").text
%>
</script>

<style type="text/css">

text
{
  font-size: 14px;
}

rect
{
  fill: none;
}
</style>

</head>
<body>
<div id="chartTitle" class="ui-widget-content">
  <h1 id="titletext"></h1>
</div>

<div id="settings" style="visibility: hidden">
  <div id="chartHeight" value="600"></div>
  <div id="chartWidth" value="800"></div>
  
  <div id="titleTop" value="0"></div>
  <div id="titleLeft" value="0"></div>
  <div id="chartTop" value="0"></div>
  <div id="chartLeft" value="0"></div>
  <div id="chartConfigTop" value="200"></div>
  <div id="chartConfigLeft" value="600"></div>
</div>

<div id="chart"><svg id="chartSvg"><defs id="gradients"></defs></svg></div>

<script type="text/javascript">

<% println "var dex = " + DexUtil.getCsvString(dexData) %>

readJson = function(text, callback)
{
  callback(text ? JSON.parse(text) : null);
}

var width    = d3.select("#chartWidth").attr("value");
var height   = d3.select("#chartHeight").attr("value");

\$("#chartTitle").position({ top : titleTop, left : titleLeft });
\$("#chart").position({ top : chartTop, left : chartLeft });
\$("#chartConfig").position({ top : chartConfigTop, left : chartConfigLeft });

function draw()
{
  d3.select("#chart").html("");
  drawBinChart(width, height);
}

function drawBinChart(width, height)
{
  var jsonData = getJsonFromCsv(dex);
  var header = getHeader(dex);
  
  var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = width - margin.left - margin.right,
    height = height - margin.top - margin.bottom;

  //var x = d3.time.scale()
  //  .rangeRound([0, width]);

  var minX = getMin(dex, 0);
  var maxX = getMax(dex, 0);
  var minY = getMin(dex, 1);
  var maxY = getMax(dex, 1);
  var minZ = getMin(dex, 2);
  var maxZ = getMax(dex, 2);

  console.log("MINX: " + maxZ);

  // Create X scale, ordinal or numeric.
  var x;
  if (isNumericColumn(dex, 0))
  {
    x = d3.scale.linear()
      .domain([minX, maxX])
      .rangeRound([0, width]);
  }
  else
  {
    x = d3.scale.ordinal()
      .domain(jsonData.map(function(d) { return d[header[0]]; }))
      .rangePoints([0, width]);
  }

  // Create Y scale, ordinal or numeric.
  var y;
  if (isNumericColumn(dex, 1))
  {
    y = d3.scale.linear()
      .domain([minY, maxY])
      .rangeRound([height, 0]);
  }
  else
  {
    y = d3.scale.ordinal()
      .domain(jsonData.map(function(d) { return d[header[1]]; }))
      .rangePoints([height, 0]);
  }

  var z = d3.scale.linear()
    .domain([minZ, maxZ])
    .range([1, 100]);

  // Z scale must be numeric.
  var color = d3.scale.linear()
    .domain([minZ, maxZ])
    .range(["white", "red"])
    .interpolate(d3.interpolateLab);

  var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

  var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

  var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  readJson(JSON.stringify(jsonData), function(data)
  {
    var circles = svg.selectAll("circle")
      .data(data)
      .enter().append("circle")
      .attr("cx", function(d) { console.log("X=" + x(d[header[0]]));return x(d[header[0]]); })
      .attr("cy", function(d) { return y(d[header[1]]); })
      .attr("r", function(d) { return z(d[header[2]]); })
      .style("fill", function(d) { return color(d[header[2]]); });

    svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

    svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
  });
}

draw();

<%
println """

  function toggleConfig()
  {
    if (\$("#chartConfig").css('visibility') == 'hidden')
    {
      show("#chartConfig");
    }
    else
    {
      hide("#chartConfig");
    }
  }

  function hide(elt)
  {
    \$(elt).css("visibility", "hidden");
  }

  function show(elt)
  {
    \$(elt).css("visibility", "visible");
  }

  \$(function()
  {
    \$( "#chartTitle" ).draggable().zIndex(3);
    \$( "#chartConfig" ).draggable().zIndex(2);
    \$( "#chart" ).draggable().zIndex(1);
  });

  \$(document).keypress(function(e)
  {
    if (e.altKey) {
      console.log("Alt Pressed");
      toggleConfig();
    }
  });

   \$("#chartTitle").draggable(
   {
    stop: function(event, ui) {
    	var pos = \$(this).position();
    	d3.select("#titleTop").attr("value", pos.top);
    	d3.select("#titleLeft").attr("value", pos.left);
    }
   });

   \$("#chart").draggable(
   {
    stop: function(event, ui) {

    	// Show dropped position.
    	var pos = \$(this).position();
    	d3.select("#chartTop").attr("value", pos.top);
    	d3.select("#chartLeft").attr("value", pos.left);
    }
   });

   \$("#chartConfig").draggable(
   {
    stop: function(event, ui) {
    	var pos = \$(this).position();
    	d3.select("#chartConfigTop").attr("value", pos.top);
    	d3.select("#chartConfigLeft").attr("value", pos.left);
    }
   });
 
	\$(function() {
		\$( "#height-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: height,
		  slide : function(event, ui)
		  {
		    height = ui.value;
		    draw();
	        \$("#height-input").val(height);
	        d3.select("#chartHeight").attr("value", height);
		  }
		});
		\$("#height-input").val(height);
		d3.select("#chartHeight").attr("value", height);
	});

  \$(function()
  {
    \$("#height-input").change(function ()
    {
      height = parseInt(this.value);
      draw();
      d3.select("#chartHeight").attr("value", height);
      \$("#height-slider").slider("value", height);
    });
  });

	\$(function()
	{
		\$( "#width-slider" ).slider(
		{
	    min: 100,
		  max: 2000,
		  value: width,
		  slide : function(event, ui)
		  {
		    width = ui.value;
		    draw();
	      \$("#width-input").val(width);
	      d3.select("#chartWidth").attr("value", width);
		  }
		});
		\$("#width-input").val(width);
		d3.select("#chartWidth").attr(width);
	});

  \$(function()
  {
    \$("#width-input").change(function ()
    {
      width = parseInt(this.value);
      draw();
      d3.select("#chartWidth").attr("value", width);
      \$("#width-slider").slider("value", width);
    });
  });

	\$(function()
	{
		\$( "#padding-slider" ).slider(
		{
	    min: 0,
		  max: 200,
		  value: padding,
		  slide : function(event, ui)
		  {
		    padding = ui.value;
	        draw();
	        \$("#padding-input").val(padding);
	        d3.select("#padding").attr("value", padding);
		  }
		});
		\$("#padding-input").val(padding);
		d3.select("#padding").attr("value", padding);
	});

  \$(function()
  {
    \$("#padding-input").change(function ()
    {
      padding = parseInt(this.value);
      draw();
      d3.select("#padding").attr("value", padding);
      \$("#padding-slider").slider("value", padding);
    });
  });

	\$(function()
	{
		\$( "#opacity-slider" ).slider(
		{
	    min: 0,
		  max: 100,
		  value: opacity,
		  slide : function(event, ui)
		  {
		    opacity = ui.value;
		    d3.select("#opacity").attr("value", opacity);
	        draw();
	        \$("#opacity-input").val(opacity);
		  }
		});
		\$("#opacity-input").val(opacity);
		d3.select("#opacity").attr("value", opacity);
	});

  \$(function()
  {
    \$("#opacity-input").change(function ()
    {
      opacity = parseInt(this.value);
      d3.select("#opacity").attr("value", opacity);
      draw();
      \$("#opacity-slider").slider("value", opacity);
    });
  });

	\$(function()
	{
		\$( "#fontsize-slider" ).slider(
		{
	    min: 0,
		  max: 100,
		  value: fontSize,
		  slide : function(event, ui)
		  {
		    fontSize = ui.value;
		    d3.select("#fontsize").attr("value", fontSize);
	      draw();
	      \$("#fontsize-input").val(fontSize);
	    }
		});
		\$("#fontsize-input").val(fontSize);
		d3.select("#fontsize").attr("value", fontSize);
	});

  \$(function()
  {
    \$("#fontsize-input").change(function ()
    {
      fontSize = parseInt(this.value);
      d3.select("#fontsize").attr("value", fontSize);
      draw();
      \$("#fontsize-slider").slider("value", fontSize);
    });
  });

  \$(function()
  {
    \$("#colorschemeSelection").change(function ()
    {
      colorScheme = this.value;
      d3.select("#colorScheme").attr("value", colorScheme);
      setColorScheme();
      draw();
    });
  });

  function titleChange(newTitle)
  {
    d3.select("title").text(newTitle);
    d3.select("#titletext").text(newTitle);
  }
"""
%>
</script>
    
<div id="chartConfig" class="demo">
    <h1>Configuration</h1>
	<div>
		<label for="height">Height:</label>
		<input type="text" id="height-input" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="height-slider"/>
	</div>
	<div>
		<label for="width">Width:</label>
		<input type="text" id="width-input" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="width-slider"/>
	</div>
	<div>
		<label for="charttitle">Title:</label>
		<input type="text" id="charttitle" size="20" style="border:2; color:#f6931f; font-weight:10;" onchange="titleChange(this.value)" />
	</div>
</div>
  </body>
</html>

